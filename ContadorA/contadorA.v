/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os) */

module contadorA(enable, clk, reset, mode, D, load, rco, Q);
  wire [3:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [1:0] _008_;
  wire [1:0] _009_;
  wire [1:0] _010_;
  wire [1:0] _011_;
  wire [1:0] _012_;
  wire [1:0] _013_;
  wire [1:0] _014_;
  wire [1:0] _015_;
  wire [1:0] _016_;
  wire [1:0] _017_;
  wire [1:0] _018_;
  wire [1:0] _019_;
  wire _020_;
  wire _021_;
  wire [3:0] _022_;
  wire [1:0] _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire [3:0] _042_;
  wire _043_;
  wire [3:0] _044_;
  wire _045_;
  wire _046_;
  wire [15:0] _047_;
  wire [3:0] _048_;
  wire [3:0] _049_;
  wire [31:0] _050_;
  wire [31:0] _051_;
  wire [31:0] _052_;
  wire _053_;
  wire [31:0] _054_;
  wire _055_;
  wire _056_;
  input [3:0] D;
  output [3:0] Q;
  reg [3:0] Q;
  input clk;
  input enable;
  output load;
  reg load;
  input [1:0] mode;
  output rco;
  reg rco;
  input reset;
  assign _008_[0] = Q[0] | _022_[1];
  assign _024_ = _008_[0] | _008_[1];
  assign _025_ = _009_[0] | _008_[1];
  assign _010_[1] = Q[2] | _022_[3];
  assign _026_ = _009_[0] | _010_[1];
  assign _011_[0] = _006_[0] | _022_[1];
  assign _008_[1] = _022_[2] | _022_[3];
  assign _005_ = _011_[0] | _008_[1];
  assign _027_ = _023_[0] | _023_[1];
  assign _028_ = mode[0] | _023_[1];
  assign _029_ = _023_[0] | mode[1];
  assign _012_[0] = _042_[0] | _042_[1];
  assign _043_ = _012_[0] | _012_[1];
  assign _053_ = _013_[0] | _013_[1];
  assign _014_[0] = _042_[0] | _044_[1];
  assign _014_[1] = _012_[1] | _044_[3];
  assign _045_ = _014_[0] | _014_[1];
  assign _015_[0] = _047_[2] | _047_[6];
  assign _015_[1] = _047_[10] | _047_[14];
  assign _048_[2] = _015_[0] | _015_[1];
  assign _016_[0] = _047_[3] | _047_[7];
  assign _016_[1] = _047_[11] | _047_[15];
  assign _048_[3] = _016_[0] | _016_[1];
  assign _017_[0] = _047_[1] | _047_[5];
  assign _017_[1] = _047_[9] | _047_[13];
  assign _048_[1] = _017_[0] | _017_[1];
  assign _018_[0] = _047_[0] | _047_[4];
  assign _018_[1] = _047_[8] | _047_[12];
  assign _048_[0] = _018_[0] | _018_[1];
  assign _013_[0] = _042_[0] | _039_;
  assign _013_[1] = _040_ | _041_;
  assign _009_[0] = Q[0] | Q[1];
  assign _019_[1] = Q[2] | Q[3];
  assign _020_ = _009_[0] | _019_[1];
  assign _021_ = mode[0] | mode[1];
  assign _033_ = ~_024_;
  assign _034_ = ~_025_;
  assign _031_ = ~_026_;
  assign _004_ = ~_020_;
  assign _032_ = ~_005_;
  assign _042_[0] = ~_027_;
  assign _039_ = ~_028_;
  assign _040_ = ~_029_;
  assign _041_ = ~_021_;
  assign _035_ = enable & _030_;
  assign _038_ = _032_ | _033_;
  assign _036_ = _038_ | _034_;
  assign _037_ = _036_ | _031_;
  assign _001_ = _035_ ? _003_ : 1'b0;
  assign _002_ = _035_ ? _046_ : 1'b0;
  assign _000_[0] = _035_ ? _049_[0] : 1'b0;
  assign _000_[1] = _035_ ? _049_[1] : 1'b0;
  assign _000_[2] = _035_ ? _049_[2] : 1'b0;
  assign _000_[3] = _035_ ? _049_[3] : 1'b0;
  assign _003_ = _053_ ? _043_ : 1'bx;
  assign _046_ = _053_ ? _045_ : rco;
  assign _049_[0] = _053_ ? _048_[0] : Q[0];
  assign _049_[1] = _053_ ? _048_[1] : Q[1];
  assign _049_[2] = _053_ ? _048_[2] : Q[2];
  assign _049_[3] = _053_ ? _048_[3] : Q[3];
  assign _030_ = ~reset;
  always @(posedge clk or posedge reset)
    if (reset)
      Q[0] <= 0;
    else
      Q[0] <= _000_[0];
  always @(posedge clk or posedge reset)
    if (reset)
      Q[1] <= 0;
    else
      Q[1] <= _000_[1];
  always @(posedge clk or posedge reset)
    if (reset)
      Q[2] <= 0;
    else
      Q[2] <= _000_[2];
  always @(posedge clk or posedge reset)
    if (reset)
      Q[3] <= 0;
    else
      Q[3] <= _000_[3];
  always @(posedge clk or posedge reset)
    if (reset)
      load <= 0;
    else
      load <= _001_;
  always @(posedge clk or posedge reset)
    if (reset)
      rco <= 0;
    else
      rco <= _002_;
  assign _051_[2] = Q[2] & _051_[1];
  assign _051_[1] = Q[1] | _055_;
  assign _055_ = _022_[1] & Q[0];
  assign _056_ = _022_[2] & _051_[1];
  assign _054_[2] = Q[2] | _056_;
  assign _052_[1] = Q[1] & Q[0];
  assign _052_[2] = Q[2] & _052_[1];
  assign _022_[2] = Q[2] ^ 1'b1;
  assign _023_[1] = mode[1] ^ 1'b1;
  assign _023_[0] = mode[0] ^ 1'b1;
  assign _042_[1] = _005_ & _039_;
  assign _044_[3] = _037_ & _041_;
  assign _012_[1] = _004_ & _040_;
  assign _044_[1] = _032_ & _039_;
  assign _047_[12] = _006_[0] & _041_;
  assign _047_[13] = _006_[1] & _041_;
  assign _047_[14] = _006_[2] & _041_;
  assign _047_[15] = _006_[3] & _041_;
  assign _047_[8] = _006_[0] & _040_;
  assign _047_[9] = _006_[1] & _040_;
  assign _047_[10] = _050_[2] & _040_;
  assign _047_[11] = _050_[3] & _040_;
  assign _047_[4] = _006_[0] & _039_;
  assign _047_[5] = _007_[1] & _039_;
  assign _047_[6] = _007_[2] & _039_;
  assign _047_[7] = _007_[3] & _039_;
  assign _047_[0] = D[0] & _042_[0];
  assign _047_[1] = D[1] & _042_[0];
  assign _047_[2] = D[2] & _042_[0];
  assign _047_[3] = D[3] & _042_[0];
  assign _006_[0] = Q[0] ^ 1'b1;
  assign _022_[1] = Q[1] ^ 1'b1;
  assign _006_[1] = _022_[1] ^ Q[0];
  assign _006_[2] = Q[2] ^ _051_[1];
  assign _006_[3] = Q[3] ^ _051_[2];
  assign _022_[3] = Q[3] ^ 1'b1;
  assign _050_[2] = _022_[2] ^ _051_[1];
  assign _050_[3] = _022_[3] ^ _054_[2];
  assign _007_[1] = Q[1] ^ Q[0];
  assign _007_[2] = Q[2] ^ _052_[1];
  assign _007_[3] = Q[3] ^ _052_[2];
endmodule
