Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `arbiter.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `arbiter.v' to AST representation.
Generating RTLIL representation for module `\arbiter'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \arbiter

3.1.2. Analyzing design hierarchy..
Top module:  \arbiter
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\arbiter.$proc$arbiter.v:101$176'.
     1/2: $0\lmask1[0:0]
     2/2: $0\lmask0[0:0]
Creating decoders for process `\arbiter.$proc$arbiter.v:78$155'.
     1/2: $0\ledge[0:0]
     2/2: $0\lasmask[0:0]
Creating decoders for process `\arbiter.$proc$arbiter.v:45$1'.
     1/4: $0\lgnt3[0:0]
     2/4: $0\lgnt2[0:0]
     3/4: $0\lgnt1[0:0]
     4/4: $0\lgnt0[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\arbiter.\lmask0' using process `\arbiter.$proc$arbiter.v:101$176'.
  created $dff cell `$procdff$201' with positive edge clock.
Creating register for signal `\arbiter.\lmask1' using process `\arbiter.$proc$arbiter.v:101$176'.
  created $dff cell `$procdff$202' with positive edge clock.
Creating register for signal `\arbiter.\lasmask' using process `\arbiter.$proc$arbiter.v:78$155'.
  created $dff cell `$procdff$203' with positive edge clock.
Creating register for signal `\arbiter.\ledge' using process `\arbiter.$proc$arbiter.v:78$155'.
  created $dff cell `$procdff$204' with positive edge clock.
Creating register for signal `\arbiter.\lgnt0' using process `\arbiter.$proc$arbiter.v:45$1'.
  created $dff cell `$procdff$205' with positive edge clock.
Creating register for signal `\arbiter.\lgnt1' using process `\arbiter.$proc$arbiter.v:45$1'.
  created $dff cell `$procdff$206' with positive edge clock.
Creating register for signal `\arbiter.\lgnt2' using process `\arbiter.$proc$arbiter.v:45$1'.
  created $dff cell `$procdff$207' with positive edge clock.
Creating register for signal `\arbiter.\lgnt3' using process `\arbiter.$proc$arbiter.v:45$1'.
  created $dff cell `$procdff$208' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\arbiter.$proc$arbiter.v:101$176'.
Removing empty process `arbiter.$proc$arbiter.v:101$176'.
Removing empty process `arbiter.$proc$arbiter.v:78$155'.
Found and cleaned up 1 empty switch in `\arbiter.$proc$arbiter.v:45$1'.
Removing empty process `arbiter.$proc$arbiter.v:45$1'.
Cleaned up 3 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.5. Executing CHECK pass (checking for obvious problems).
checking module arbiter..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
  Cell `$not$arbiter.v:53$14' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:53$14_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:53$14' from module `\arbiter'.
  Cell `$not$arbiter.v:53$15' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:53$15_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:53$15' from module `\arbiter'.
  Cell `$not$arbiter.v:53$18' is identical to cell `$not$arbiter.v:52$7'.
    Redirecting output \Y: $not$arbiter.v:53$18_Y = $not$arbiter.v:52$7_Y
    Removing $not cell `$not$arbiter.v:53$18' from module `\arbiter'.
  Cell `$not$arbiter.v:53$20' is identical to cell `$not$arbiter.v:52$9'.
    Redirecting output \Y: $not$arbiter.v:53$20_Y = $not$arbiter.v:52$9_Y
    Removing $not cell `$not$arbiter.v:53$20' from module `\arbiter'.
  Cell `$not$arbiter.v:54$24' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:54$24_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:54$24' from module `\arbiter'.
  Cell `$not$arbiter.v:54$26' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:54$26_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:54$26' from module `\arbiter'.
  Cell `$not$arbiter.v:54$28' is identical to cell `$not$arbiter.v:52$7'.
    Redirecting output \Y: $not$arbiter.v:54$28_Y = $not$arbiter.v:52$7_Y
    Removing $not cell `$not$arbiter.v:54$28' from module `\arbiter'.
  Cell `$not$arbiter.v:55$32' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:55$32_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:55$32' from module `\arbiter'.
  Cell `$not$arbiter.v:57$39' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:57$39_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:57$39' from module `\arbiter'.
  Cell `$not$arbiter.v:57$40' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:57$40_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:57$40' from module `\arbiter'.
  Cell `$not$arbiter.v:57$42' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:57$42_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:57$42' from module `\arbiter'.
  Cell `$not$arbiter.v:58$45' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:58$45_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:58$45' from module `\arbiter'.
  Cell `$not$arbiter.v:58$46' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:58$46_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:58$46' from module `\arbiter'.
  Cell `$not$arbiter.v:58$49' is identical to cell `$not$arbiter.v:52$7'.
    Redirecting output \Y: $not$arbiter.v:58$49_Y = $not$arbiter.v:52$7_Y
    Removing $not cell `$not$arbiter.v:58$49' from module `\arbiter'.
  Cell `$not$arbiter.v:58$51' is identical to cell `$not$arbiter.v:52$9'.
    Redirecting output \Y: $not$arbiter.v:58$51_Y = $not$arbiter.v:52$9_Y
    Removing $not cell `$not$arbiter.v:58$51' from module `\arbiter'.
  Cell `$not$arbiter.v:59$57' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:59$57_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:59$57' from module `\arbiter'.
  Cell `$not$arbiter.v:59$59' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:59$59_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:59$59' from module `\arbiter'.
  Cell `$not$arbiter.v:59$61' is identical to cell `$not$arbiter.v:52$7'.
    Redirecting output \Y: $not$arbiter.v:59$61_Y = $not$arbiter.v:52$7_Y
    Removing $not cell `$not$arbiter.v:59$61' from module `\arbiter'.
  Cell `$not$arbiter.v:59$64' is identical to cell `$not$arbiter.v:58$54'.
    Redirecting output \Y: $not$arbiter.v:59$64_Y = $not$arbiter.v:58$54_Y
    Removing $not cell `$not$arbiter.v:59$64' from module `\arbiter'.
  Cell `$not$arbiter.v:60$67' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:60$67_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:60$67' from module `\arbiter'.
  Cell `$not$arbiter.v:60$71' is identical to cell `$not$arbiter.v:58$54'.
    Redirecting output \Y: $not$arbiter.v:60$71_Y = $not$arbiter.v:58$54_Y
    Removing $not cell `$not$arbiter.v:60$71' from module `\arbiter'.
  Cell `$not$arbiter.v:62$76' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:62$76_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:62$76' from module `\arbiter'.
  Cell `$not$arbiter.v:62$77' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:62$77_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:62$77' from module `\arbiter'.
  Cell `$not$arbiter.v:62$79' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:62$79_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:62$79' from module `\arbiter'.
  Cell `$not$arbiter.v:62$82' is identical to cell `$not$arbiter.v:52$11'.
    Redirecting output \Y: $not$arbiter.v:62$82_Y = $not$arbiter.v:52$11_Y
    Removing $not cell `$not$arbiter.v:62$82' from module `\arbiter'.
  Cell `$not$arbiter.v:63$84' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:63$84_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:63$84' from module `\arbiter'.
  Cell `$not$arbiter.v:63$85' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:63$85_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:63$85' from module `\arbiter'.
  Cell `$not$arbiter.v:64$90' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:64$90_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:64$90' from module `\arbiter'.
  Cell `$not$arbiter.v:64$92' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:64$92_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:64$92' from module `\arbiter'.
  Cell `$not$arbiter.v:64$94' is identical to cell `$not$arbiter.v:52$7'.
    Redirecting output \Y: $not$arbiter.v:64$94_Y = $not$arbiter.v:52$7_Y
    Removing $not cell `$not$arbiter.v:64$94' from module `\arbiter'.
  Cell `$not$arbiter.v:64$97' is identical to cell `$not$arbiter.v:52$11'.
    Redirecting output \Y: $not$arbiter.v:64$97_Y = $not$arbiter.v:52$11_Y
    Removing $not cell `$not$arbiter.v:64$97' from module `\arbiter'.
  Cell `$not$arbiter.v:64$99' is identical to cell `$not$arbiter.v:58$54'.
    Redirecting output \Y: $not$arbiter.v:64$99_Y = $not$arbiter.v:58$54_Y
    Removing $not cell `$not$arbiter.v:64$99' from module `\arbiter'.
  Cell `$not$arbiter.v:65$102' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:65$102_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:65$102' from module `\arbiter'.
  Cell `$not$arbiter.v:65$106' is identical to cell `$not$arbiter.v:52$11'.
    Redirecting output \Y: $not$arbiter.v:65$106_Y = $not$arbiter.v:52$11_Y
    Removing $not cell `$not$arbiter.v:65$106' from module `\arbiter'.
  Cell `$not$arbiter.v:65$108' is identical to cell `$not$arbiter.v:58$54'.
    Redirecting output \Y: $not$arbiter.v:65$108_Y = $not$arbiter.v:58$54_Y
    Removing $not cell `$not$arbiter.v:65$108' from module `\arbiter'.
  Cell `$not$arbiter.v:67$113' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:67$113_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:67$113' from module `\arbiter'.
  Cell `$not$arbiter.v:67$114' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:67$114_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:67$114' from module `\arbiter'.
  Cell `$not$arbiter.v:67$116' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:67$116_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:67$116' from module `\arbiter'.
  Cell `$not$arbiter.v:67$119' is identical to cell `$not$arbiter.v:52$9'.
    Redirecting output \Y: $not$arbiter.v:67$119_Y = $not$arbiter.v:52$9_Y
    Removing $not cell `$not$arbiter.v:67$119' from module `\arbiter'.
  Cell `$not$arbiter.v:67$121' is identical to cell `$not$arbiter.v:52$11'.
    Redirecting output \Y: $not$arbiter.v:67$121_Y = $not$arbiter.v:52$11_Y
    Removing $not cell `$not$arbiter.v:67$121' from module `\arbiter'.
  Cell `$not$arbiter.v:68$123' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:68$123_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:68$123' from module `\arbiter'.
  Cell `$not$arbiter.v:68$124' is identical to cell `$not$arbiter.v:52$3'.
    Redirecting output \Y: $not$arbiter.v:68$124_Y = $not$arbiter.v:52$3_Y
    Removing $not cell `$not$arbiter.v:68$124' from module `\arbiter'.
  Cell `$not$arbiter.v:68$128' is identical to cell `$not$arbiter.v:52$9'.
    Redirecting output \Y: $not$arbiter.v:68$128_Y = $not$arbiter.v:52$9_Y
    Removing $not cell `$not$arbiter.v:68$128' from module `\arbiter'.
  Cell `$not$arbiter.v:69$131' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:69$131_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:69$131' from module `\arbiter'.
  Cell `$not$arbiter.v:69$133' is identical to cell `$not$arbiter.v:52$5'.
    Redirecting output \Y: $not$arbiter.v:69$133_Y = $not$arbiter.v:52$5_Y
    Removing $not cell `$not$arbiter.v:69$133' from module `\arbiter'.
  Cell `$not$arbiter.v:70$137' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:70$137_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:70$137' from module `\arbiter'.
  Cell `$not$arbiter.v:70$141' is identical to cell `$not$arbiter.v:52$9'.
    Redirecting output \Y: $not$arbiter.v:70$141_Y = $not$arbiter.v:52$9_Y
    Removing $not cell `$not$arbiter.v:70$141' from module `\arbiter'.
  Cell `$not$arbiter.v:70$143' is identical to cell `$not$arbiter.v:52$11'.
    Redirecting output \Y: $not$arbiter.v:70$143_Y = $not$arbiter.v:52$11_Y
    Removing $not cell `$not$arbiter.v:70$143' from module `\arbiter'.
  Cell `$not$arbiter.v:70$145' is identical to cell `$not$arbiter.v:58$54'.
    Redirecting output \Y: $not$arbiter.v:70$145_Y = $not$arbiter.v:58$54_Y
    Removing $not cell `$not$arbiter.v:70$145' from module `\arbiter'.
  Cell `$not$arbiter.v:77$153' is identical to cell `$not$arbiter.v:52$2'.
    Redirecting output \Y: $not$arbiter.v:77$153_Y = $not$arbiter.v:52$2_Y
    Removing $not cell `$not$arbiter.v:77$153' from module `\arbiter'.
  Cell `$not$arbiter.v:81$160' is identical to cell `$not$arbiter.v:80$156'.
    Redirecting output \Y: $not$arbiter.v:81$160_Y = $not$arbiter.v:80$156_Y
    Removing $not cell `$not$arbiter.v:81$160' from module `\arbiter'.
  Cell `$not$arbiter.v:82$164' is identical to cell `$not$arbiter.v:80$158'.
    Redirecting output \Y: $not$arbiter.v:82$164_Y = $not$arbiter.v:80$158_Y
    Removing $not cell `$not$arbiter.v:82$164' from module `\arbiter'.
  Cell `$and$arbiter.v:68$125' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:68$125_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:68$125' from module `\arbiter'.
  Cell `$and$arbiter.v:70$138' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:70$138_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:70$138' from module `\arbiter'.
  Cell `$and$arbiter.v:81$161' is identical to cell `$and$arbiter.v:80$157'.
    Redirecting output \Y: $and$arbiter.v:81$161_Y = $and$arbiter.v:80$157_Y
    Removing $and cell `$and$arbiter.v:81$161' from module `\arbiter'.
  Cell `$and$arbiter.v:52$4' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:52$4_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:52$4' from module `\arbiter'.
  Cell `$and$arbiter.v:52$6' is identical to cell `$and$arbiter.v:67$117'.
    Redirecting output \Y: $and$arbiter.v:52$6_Y = $and$arbiter.v:67$117_Y
    Removing $and cell `$and$arbiter.v:52$6' from module `\arbiter'.
  Cell `$and$arbiter.v:53$16' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:53$16_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:53$16' from module `\arbiter'.
  Cell `$and$arbiter.v:53$17' is identical to cell `$and$arbiter.v:68$126'.
    Redirecting output \Y: $and$arbiter.v:53$17_Y = $and$arbiter.v:68$126_Y
    Removing $and cell `$and$arbiter.v:53$17' from module `\arbiter'.
  Cell `$and$arbiter.v:54$25' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:54$25_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:54$25' from module `\arbiter'.
  Cell `$and$arbiter.v:54$27' is identical to cell `$and$arbiter.v:69$134'.
    Redirecting output \Y: $and$arbiter.v:54$27_Y = $and$arbiter.v:69$134_Y
    Removing $and cell `$and$arbiter.v:54$27' from module `\arbiter'.
  Cell `$and$arbiter.v:55$33' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:55$33_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:55$33' from module `\arbiter'.
  Cell `$and$arbiter.v:55$34' is identical to cell `$and$arbiter.v:70$139'.
    Redirecting output \Y: $and$arbiter.v:55$34_Y = $and$arbiter.v:70$139_Y
    Removing $and cell `$and$arbiter.v:55$34' from module `\arbiter'.
  Cell `$and$arbiter.v:57$41' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:57$41_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:57$41' from module `\arbiter'.
  Cell `$and$arbiter.v:57$43' is identical to cell `$and$arbiter.v:67$117'.
    Redirecting output \Y: $and$arbiter.v:57$43_Y = $and$arbiter.v:67$117_Y
    Removing $and cell `$and$arbiter.v:57$43' from module `\arbiter'.
  Cell `$and$arbiter.v:58$47' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:58$47_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:58$47' from module `\arbiter'.
  Cell `$and$arbiter.v:58$48' is identical to cell `$and$arbiter.v:68$126'.
    Redirecting output \Y: $and$arbiter.v:58$48_Y = $and$arbiter.v:68$126_Y
    Removing $and cell `$and$arbiter.v:58$48' from module `\arbiter'.
  Cell `$and$arbiter.v:58$50' is identical to cell `$and$arbiter.v:53$19'.
    Redirecting output \Y: $and$arbiter.v:58$50_Y = $and$arbiter.v:53$19_Y
    Removing $and cell `$and$arbiter.v:58$50' from module `\arbiter'.
  Cell `$and$arbiter.v:58$52' is identical to cell `$and$arbiter.v:53$21'.
    Redirecting output \Y: $and$arbiter.v:58$52_Y = $and$arbiter.v:53$21_Y
    Removing $and cell `$and$arbiter.v:58$52' from module `\arbiter'.
  Cell `$and$arbiter.v:59$58' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:59$58_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:59$58' from module `\arbiter'.
  Cell `$and$arbiter.v:59$60' is identical to cell `$and$arbiter.v:69$134'.
    Redirecting output \Y: $and$arbiter.v:59$60_Y = $and$arbiter.v:69$134_Y
    Removing $and cell `$and$arbiter.v:59$60' from module `\arbiter'.
  Cell `$and$arbiter.v:59$62' is identical to cell `$and$arbiter.v:54$29'.
    Redirecting output \Y: $and$arbiter.v:59$62_Y = $and$arbiter.v:54$29_Y
    Removing $and cell `$and$arbiter.v:59$62' from module `\arbiter'.
  Cell `$and$arbiter.v:60$68' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:60$68_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:60$68' from module `\arbiter'.
  Cell `$and$arbiter.v:60$69' is identical to cell `$and$arbiter.v:70$139'.
    Redirecting output \Y: $and$arbiter.v:60$69_Y = $and$arbiter.v:70$139_Y
    Removing $and cell `$and$arbiter.v:60$69' from module `\arbiter'.
  Cell `$and$arbiter.v:62$78' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:62$78_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:62$78' from module `\arbiter'.
  Cell `$and$arbiter.v:62$80' is identical to cell `$and$arbiter.v:67$117'.
    Redirecting output \Y: $and$arbiter.v:62$80_Y = $and$arbiter.v:67$117_Y
    Removing $and cell `$and$arbiter.v:62$80' from module `\arbiter'.
  Cell `$and$arbiter.v:63$86' is identical to cell `$and$arbiter.v:67$115'.
    Redirecting output \Y: $and$arbiter.v:63$86_Y = $and$arbiter.v:67$115_Y
    Removing $and cell `$and$arbiter.v:63$86' from module `\arbiter'.
  Cell `$and$arbiter.v:63$87' is identical to cell `$and$arbiter.v:68$126'.
    Redirecting output \Y: $and$arbiter.v:63$87_Y = $and$arbiter.v:68$126_Y
    Removing $and cell `$and$arbiter.v:63$87' from module `\arbiter'.
  Cell `$and$arbiter.v:64$91' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:64$91_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:64$91' from module `\arbiter'.
  Cell `$and$arbiter.v:64$93' is identical to cell `$and$arbiter.v:69$134'.
    Redirecting output \Y: $and$arbiter.v:64$93_Y = $and$arbiter.v:69$134_Y
    Removing $and cell `$and$arbiter.v:64$93' from module `\arbiter'.
  Cell `$and$arbiter.v:64$95' is identical to cell `$and$arbiter.v:54$29'.
    Redirecting output \Y: $and$arbiter.v:64$95_Y = $and$arbiter.v:54$29_Y
    Removing $and cell `$and$arbiter.v:64$95' from module `\arbiter'.
  Cell `$and$arbiter.v:65$103' is identical to cell `$and$arbiter.v:69$132'.
    Redirecting output \Y: $and$arbiter.v:65$103_Y = $and$arbiter.v:69$132_Y
    Removing $and cell `$and$arbiter.v:65$103' from module `\arbiter'.
  Cell `$and$arbiter.v:70$139' is identical to cell `$and$arbiter.v:65$104'.
    Redirecting output \Y: $and$arbiter.v:70$139_Y = $and$arbiter.v:65$104_Y
    Removing $and cell `$and$arbiter.v:70$139' from module `\arbiter'.
Removed a total of 83 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$181 (pure)
    Root of a mux tree: $procmux$187 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$193 (pure)
    Root of a mux tree: $procmux$196 (pure)
    Root of a mux tree: $procmux$199 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module arbiter:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$181 (pure)
    Root of a mux tree: $procmux$187 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$193 (pure)
    Root of a mux tree: $procmux$196 (pure)
    Root of a mux tree: $procmux$199 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$181 (pure)
    Root of a mux tree: $procmux$187 (pure)
    Root of a mux tree: $procmux$190 (pure)
    Root of a mux tree: $procmux$193 (pure)
    Root of a mux tree: $procmux$196 (pure)
    Root of a mux tree: $procmux$199 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping arbiter.$not$arbiter.v:52$2 ($not) with simplemap.
Mapping arbiter.$not$arbiter.v:52$3 ($not) with simplemap.
Mapping arbiter.$not$arbiter.v:52$5 ($not) with simplemap.
Mapping arbiter.$not$arbiter.v:52$7 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:52$8 ($and) with simplemap.
Mapping arbiter.$not$arbiter.v:52$9 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:52$10 ($and) with simplemap.
Mapping arbiter.$not$arbiter.v:52$11 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:52$12 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:52$13 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:53$19 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:53$21 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:53$22 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:54$23 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:54$29 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:54$30 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:55$31 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:55$35 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:56$36 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:56$37 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:56$38 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:57$44 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:58$53 ($and) with simplemap.
Mapping arbiter.$not$arbiter.v:58$54 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:58$55 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:59$56 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:59$63 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:59$65 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:60$66 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:60$70 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:60$72 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:61$73 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:61$74 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:61$75 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:62$81 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:62$83 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:63$88 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:64$89 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:64$96 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:64$98 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:64$100 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:65$101 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:65$104 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:65$105 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:65$107 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:65$109 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:66$110 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:66$111 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:66$112 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:67$115 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:67$117 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:67$118 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:67$120 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:67$122 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:68$126 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:68$127 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:68$129 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:69$130 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:69$132 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:69$134 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:69$135 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:70$136 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:70$140 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:70$142 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:70$144 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:70$146 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:71$147 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:71$148 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:71$149 ($or) with simplemap.
Mapping arbiter.$or$arbiter.v:77$150 ($or) with simplemap.
Mapping arbiter.$or$arbiter.v:77$151 ($or) with simplemap.
Mapping arbiter.$or$arbiter.v:77$152 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:77$154 ($and) with simplemap.
Mapping arbiter.$not$arbiter.v:80$156 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:80$157 ($and) with simplemap.
Mapping arbiter.$not$arbiter.v:80$158 ($not) with simplemap.
Mapping arbiter.$and$arbiter.v:80$159 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:81$162 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:82$163 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:82$165 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:82$166 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:88$167 ($and) with simplemap.
Mapping arbiter.$and$arbiter.v:89$168 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:90$169 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:90$170 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:91$171 ($or) with simplemap.
Mapping arbiter.$and$arbiter.v:91$172 ($and) with simplemap.
Mapping arbiter.$or$arbiter.v:91$173 ($or) with simplemap.
Mapping arbiter.$or$arbiter.v:96$174 ($or) with simplemap.
Mapping arbiter.$or$arbiter.v:96$175 ($or) with simplemap.
Mapping arbiter.$procmux$178 ($mux) with simplemap.
Mapping arbiter.$procmux$181 ($mux) with simplemap.
Mapping arbiter.$procmux$184 ($mux) with simplemap.
Mapping arbiter.$procmux$187 ($mux) with simplemap.
Mapping arbiter.$procmux$190 ($mux) with simplemap.
Mapping arbiter.$procmux$193 ($mux) with simplemap.
Mapping arbiter.$procmux$196 ($mux) with simplemap.
Mapping arbiter.$procmux$199 ($mux) with simplemap.
Mapping arbiter.$procdff$201 ($dff) with simplemap.
Mapping arbiter.$procdff$202 ($dff) with simplemap.
Mapping arbiter.$procdff$203 ($dff) with simplemap.
Mapping arbiter.$procdff$204 ($dff) with simplemap.
Mapping arbiter.$procdff$205 ($dff) with simplemap.
Mapping arbiter.$procdff$206 ($dff) with simplemap.
Mapping arbiter.$procdff$207 ($dff) with simplemap.
Mapping arbiter.$procdff$208 ($dff) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\arbiter' to `<abc-temp-dir>/input.blif'..
Extracted 98 gates and 112 wires to a netlist network with 13 inputs and 8 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       17
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:              AOI4 cells:        6
ABC RESULTS:               MUX cells:        2
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:        8
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:              OAI4 cells:        3
ABC RESULTS:                OR cells:        7
ABC RESULTS:        internal signals:       91
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        8
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$359$auto$blifparse.cc:286:parse_blif$363' in module `arbiter'.
Optimizing away select inverter for $_MUX_ cell `$abc$359$auto$blifparse.cc:286:parse_blif$366' in module `arbiter'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..
  removing unused non-port wire \beg.
  removing unused non-port wire \comreq.
  removing unused non-port wire \gnt.
  removing unused non-port wire \lcomreq.
  removing unused non-port wire \lgnt.
  removed 5 unused temporary wires.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \arbiter

3.22.2. Analyzing design hierarchy..
Top module:  \arbiter
Removed 0 unused modules.

3.23. Printing statistics.

=== arbiter ===

   Number of wires:                 81
   Number of wire bits:             81
   Number of public wires:          18
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 71
     $_AND_                         17
     $_AOI3_                         6
     $_AOI4_                         6
     $_DFF_P_                        8
     $_MUX_                          2
     $_NAND_                         6
     $_NOR_                          6
     $_NOT_                          8
     $_OAI3_                         2
     $_OAI4_                         3
     $_OR_                           7

3.24. Executing CHECK pass (checking for obvious problems).
checking module arbiter..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\arbiter':
  mapped 8 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\arbiter' to `<abc-temp-dir>/input.blif'..
Extracted 63 gates and 76 wires to a netlist network with 13 inputs and 8 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        5
ABC RESULTS:           AOI22X1 cells:        4
ABC RESULTS:             INVX1 cells:       11
ABC RESULTS:           NAND2X1 cells:        6
ABC RESULTS:           NAND3X1 cells:        4
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:            NOR3X1 cells:       12
ABC RESULTS:           OAI21X1 cells:        8
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       55
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        8
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 80 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port arbiter.clk: Missing option -inpad.
Mapping port arbiter.gnt0 using BUFX2.
Mapping port arbiter.gnt1 using BUFX2.
Mapping port arbiter.gnt2 using BUFX2.
Mapping port arbiter.gnt3 using BUFX2.
Don't map input port arbiter.req0: Missing option -inpad.
Don't map input port arbiter.req1: Missing option -inpad.
Don't map input port arbiter.req2: Missing option -inpad.
Don't map input port arbiter.req3: Missing option -inpad.
Don't map input port arbiter.rst: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \arbiter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \arbiter.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\arbiter'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \arbiter..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 7a030e43db
CPU: user 0.63s system 0.01s, MEM: 36.88 MB total, 10.05 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 14% 14x opt_merge (0 sec), 13% 15x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 7 (load 564.824) from node _12_,
driven by INVX1 with strength 166.776 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.577 (latency = 473.099 ps)
Top input node fanout is 8 (load 399.432) from node clk.
Warning 1: load of 574.824 is 1.0456 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 222.816 is 1.35414 times greater than strongest gate NAND3X1
Warning 3: load of 249.941 is 1.51899 times greater than strongest gate NAND3X1
3 gates exceed specified minimum load.
0 buffers were added.
1 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 64    	Out: 63    	-1
	"2" gates	In: 9    	Out: 10    	+1

gates resized: 1
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 7 (load 581.954) from node _12_,
driven by INVX2 with strength 348.442 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.45822 (latency = 437.465 ps)
Top input node fanout is 8 (load 399.432) from node clk.
Warning 1: load of 591.954 is 1.07676 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 222.816 is 1.35414 times greater than strongest gate NAND3X1
Warning 3: load of 249.941 is 1.51899 times greater than strongest gate NAND3X1
3 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 63    	Out: 63    	+0
	"2" gates	In: 10    	Out: 10    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on dom 15 nov 22:17:42 CST 2020
----------------------------------------------
Vesta static timing analysis tool
(c) 2013-2017 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu05_stdcells"
End of library at line 6606
Parsing module "arbiter"
Lib Read:  Processed 6607 lines.
Verilog netlist read:  Processed 91 lines.
Number of paths analyzed:  48

Top 20 maximum delay paths:
Path DFFPOSX1_6/CLK to DFFPOSX1_8/D delay 2049.88 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_8/D delay 2036.67 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_8/D delay 2031.81 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_8/D delay 2012.96 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_7/D delay 2009.83 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_7/D delay 1991.57 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_7/D delay 1991.35 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_6/D delay 1984.84 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_6/D delay 1971.7 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_7/D delay 1967.44 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_6/D delay 1966.77 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_8/D delay 1966.03 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_5/D delay 1948.94 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_6/D delay 1947.98 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_5/D delay 1934.05 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_5/D delay 1930.85 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_5/D delay 1910.31 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_6/D delay 1900.93 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_7/D delay 1881.32 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_5/D delay 1866.48 ps
Computed maximum clock frequency (zero slack) = 487.834 MHz
-----------------------------------------

Number of paths analyzed:  48

Top 20 minimum delay paths:
Path DFFPOSX1_5/CLK to output pin gnt0 delay 393.043 ps
Path DFFPOSX1_6/CLK to output pin gnt1 delay 456.969 ps
Path DFFPOSX1_7/CLK to output pin gnt2 delay 460.766 ps
Path DFFPOSX1_8/CLK to output pin gnt3 delay 470.764 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_4/D delay 552.315 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_3/D delay 586.33 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_7/D delay 666.929 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_8/D delay 675.989 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_2/D delay 679.509 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_1/D delay 680.629 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_2/D delay 680.629 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_4/D delay 695.861 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_3/D delay 703.837 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_1/D delay 747.034 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_2/D delay 750.992 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_1/D delay 759.138 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_2/D delay 759.138 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_5/D delay 760.612 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_5/D delay 814.991 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_8/D delay 814.991 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  38

Top 20 maximum delay paths:
Path input pin req1 to DFFPOSX1_8/D delay 1301.74 ps
Path input pin req3 to DFFPOSX1_8/D delay 1276.92 ps
Path input pin req1 to DFFPOSX1_7/D delay 1274.66 ps
Path input pin req0 to DFFPOSX1_8/D delay 1266.87 ps
Path input pin req1 to DFFPOSX1_6/D delay 1249.8 ps
Path input pin req3 to DFFPOSX1_7/D delay 1244.84 ps
Path input pin req2 to DFFPOSX1_8/D delay 1242.19 ps
Path input pin req0 to DFFPOSX1_7/D delay 1239.58 ps
Path input pin req1 to DFFPOSX1_5/D delay 1232.56 ps
Path input pin req3 to DFFPOSX1_6/D delay 1225.08 ps
Path input pin req0 to DFFPOSX1_6/D delay 1214.93 ps
Path input pin req2 to DFFPOSX1_7/D delay 1209.9 ps
Path input pin req3 to DFFPOSX1_5/D delay 1206.19 ps
Path input pin req0 to DFFPOSX1_5/D delay 1197.67 ps
Path input pin req2 to DFFPOSX1_6/D delay 1190.35 ps
Path input pin req2 to DFFPOSX1_5/D delay 1171.42 ps
Path input pin req1 to DFFPOSX1_3/D delay 927.774 ps
Path input pin req1 to DFFPOSX1_4/D delay 927.774 ps
Path input pin req3 to DFFPOSX1_3/D delay 910.445 ps
Path input pin req3 to DFFPOSX1_4/D delay 910.445 ps
-----------------------------------------

Number of paths analyzed:  38

Top 20 minimum delay paths:
Path input pin clk to DFFPOSX1_8/CLK delay 0 ps
Path input pin clk to DFFPOSX1_7/CLK delay 0 ps
Path input pin clk to DFFPOSX1_6/CLK delay 0 ps
Path input pin clk to DFFPOSX1_5/CLK delay 0 ps
Path input pin clk to DFFPOSX1_4/CLK delay 0 ps
Path input pin clk to DFFPOSX1_3/CLK delay 0 ps
Path input pin clk to DFFPOSX1_2/CLK delay 0 ps
Path input pin clk to DFFPOSX1_1/CLK delay 0 ps
Path input pin rst to DFFPOSX1_8/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_5/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_6/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_7/D delay 60.8009 ps
Path input pin req0 to DFFPOSX1_5/D delay 190.933 ps
Path input pin rst to DFFPOSX1_1/D delay 230.582 ps
Path input pin rst to DFFPOSX1_2/D delay 230.582 ps
Path input pin req1 to DFFPOSX1_7/D delay 322.404 ps
Path input pin req3 to DFFPOSX1_7/D delay 450.8 ps
Path input pin req1 to DFFPOSX1_6/D delay 464.153 ps
Path input pin req3 to DFFPOSX1_5/D delay 469.716 ps
Path input pin req3 to DFFPOSX1_6/D delay 469.716 ps
-----------------------------------------

----------------------------------------------
Vesta static timing analysis tool
(c) 2013-2017 Tim Edwards, Open Circuit Design
----------------------------------------------

Parsing library "osu05_stdcells"
End of library at line 6606
Parsing module "arbiter"
Lib Read:  Processed 6607 lines.
Verilog netlist read:  Processed 91 lines.
Number of paths analyzed:  48

Top 20 maximum delay paths:
Path DFFPOSX1_6/CLK to DFFPOSX1_8/D delay 2049.88 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_8/D delay 2036.67 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_8/D delay 2031.81 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_8/D delay 2012.96 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_7/D delay 2009.83 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_7/D delay 1991.57 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_7/D delay 1991.35 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_6/D delay 1984.84 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_6/D delay 1971.7 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_7/D delay 1967.44 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_6/D delay 1966.77 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_8/D delay 1966.03 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_5/D delay 1948.94 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_6/D delay 1947.98 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_5/D delay 1934.05 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_5/D delay 1930.85 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_5/D delay 1910.31 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_6/D delay 1900.93 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_7/D delay 1881.32 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_5/D delay 1866.48 ps
Computed maximum clock frequency (zero slack) = 487.834 MHz
-----------------------------------------

Number of paths analyzed:  48

Top 20 minimum delay paths:
Path DFFPOSX1_5/CLK to output pin gnt0 delay 393.043 ps
Path DFFPOSX1_6/CLK to output pin gnt1 delay 456.969 ps
Path DFFPOSX1_7/CLK to output pin gnt2 delay 460.766 ps
Path DFFPOSX1_8/CLK to output pin gnt3 delay 470.764 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_4/D delay 552.315 ps
Path DFFPOSX1_4/CLK to DFFPOSX1_3/D delay 586.33 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_7/D delay 666.929 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_8/D delay 675.989 ps
Path DFFPOSX1_2/CLK to DFFPOSX1_2/D delay 679.509 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_1/D delay 680.629 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_2/D delay 680.629 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_4/D delay 695.861 ps
Path DFFPOSX1_3/CLK to DFFPOSX1_3/D delay 703.837 ps
Path DFFPOSX1_6/CLK to DFFPOSX1_1/D delay 747.034 ps
Path DFFPOSX1_7/CLK to DFFPOSX1_2/D delay 750.992 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_1/D delay 759.138 ps
Path DFFPOSX1_8/CLK to DFFPOSX1_2/D delay 759.138 ps
Path DFFPOSX1_5/CLK to DFFPOSX1_5/D delay 760.612 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_5/D delay 814.991 ps
Path DFFPOSX1_1/CLK to DFFPOSX1_8/D delay 814.991 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  38

Top 20 maximum delay paths:
Path input pin req1 to DFFPOSX1_8/D delay 1301.74 ps
Path input pin req3 to DFFPOSX1_8/D delay 1276.92 ps
Path input pin req1 to DFFPOSX1_7/D delay 1274.66 ps
Path input pin req0 to DFFPOSX1_8/D delay 1266.87 ps
Path input pin req1 to DFFPOSX1_6/D delay 1249.8 ps
Path input pin req3 to DFFPOSX1_7/D delay 1244.84 ps
Path input pin req2 to DFFPOSX1_8/D delay 1242.19 ps
Path input pin req0 to DFFPOSX1_7/D delay 1239.58 ps
Path input pin req1 to DFFPOSX1_5/D delay 1232.56 ps
Path input pin req3 to DFFPOSX1_6/D delay 1225.08 ps
Path input pin req0 to DFFPOSX1_6/D delay 1214.93 ps
Path input pin req2 to DFFPOSX1_7/D delay 1209.9 ps
Path input pin req3 to DFFPOSX1_5/D delay 1206.19 ps
Path input pin req0 to DFFPOSX1_5/D delay 1197.67 ps
Path input pin req2 to DFFPOSX1_6/D delay 1190.35 ps
Path input pin req2 to DFFPOSX1_5/D delay 1171.42 ps
Path input pin req1 to DFFPOSX1_3/D delay 927.774 ps
Path input pin req1 to DFFPOSX1_4/D delay 927.774 ps
Path input pin req3 to DFFPOSX1_3/D delay 910.445 ps
Path input pin req3 to DFFPOSX1_4/D delay 910.445 ps
-----------------------------------------

Number of paths analyzed:  38

Top 20 minimum delay paths:
Path input pin clk to DFFPOSX1_8/CLK delay 0 ps
Path input pin clk to DFFPOSX1_7/CLK delay 0 ps
Path input pin clk to DFFPOSX1_6/CLK delay 0 ps
Path input pin clk to DFFPOSX1_5/CLK delay 0 ps
Path input pin clk to DFFPOSX1_4/CLK delay 0 ps
Path input pin clk to DFFPOSX1_3/CLK delay 0 ps
Path input pin clk to DFFPOSX1_2/CLK delay 0 ps
Path input pin clk to DFFPOSX1_1/CLK delay 0 ps
Path input pin rst to DFFPOSX1_8/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_5/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_6/D delay 60.8009 ps
Path input pin rst to DFFPOSX1_7/D delay 60.8009 ps
Path input pin req0 to DFFPOSX1_5/D delay 190.933 ps
Path input pin rst to DFFPOSX1_1/D delay 230.582 ps
Path input pin rst to DFFPOSX1_2/D delay 230.582 ps
Path input pin req1 to DFFPOSX1_7/D delay 322.404 ps
Path input pin req3 to DFFPOSX1_7/D delay 450.8 ps
Path input pin req1 to DFFPOSX1_6/D delay 464.153 ps
Path input pin req3 to DFFPOSX1_5/D delay 469.716 ps
Path input pin req3 to DFFPOSX1_6/D delay 469.716 ps
-----------------------------------------

Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu050/osu050_stdcells.lef) for reading...
Loaded BLIF file (/home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.blif) for reading ...
Loaded CEL file (/home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/layout/arbiter.cel) for writing...
1st pass of blif file /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 360 -750 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -480 -150 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -240 -450 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 479 -150 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 240 -450 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -240 -150 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 240 -450 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NOR3X1:  Ports are:
parse_pin
macroname: NOR3X1, pinname: A
Port type: INPUT 
A -600 -750 1
parse_pin
macroname: NOR3X1, pinname: B
Port type: INPUT 
B -360 -450 1
parse_pin
macroname: NOR3X1, pinname: C
Port type: INPUT 
C -120 -150 1
parse_pin
macroname: NOR3X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR3X1, pinname: Y
Port type: OUTPUT 
Y 600 150 1
parse_pin
macroname: NOR3X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 1320 -150 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -1080 -450 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -361 -150 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -120 -750 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX2:  Ports are:
parse_pin
macroname: INVX2, pinname: A
Port type: INPUT 
A -120 -450 1
parse_pin
macroname: INVX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX2, pinname: Y
Port type: OUTPUT 
Y 120 -150 1
parse_pin
macroname: INVX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 240 150 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -360 150 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 120 449 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y 360 150 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -240 -750 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 240 -150 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 360 150 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -450 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro OR2X2:  Ports are:
parse_pin
macroname: OR2X2, pinname: A
Port type: INPUT 
A -360 -750 1
parse_pin
macroname: OR2X2, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: OR2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OR2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: OR2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No arbiter.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :73
Total cell width   :8.88e+04
Total cell height  :2.19e+05
Total cell area    :2.66e+08
Total core area    :2.66e+08
Average cell height:3.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Splitting arbiter.cel into arbiter.scel and arbiter.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]



TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University
  0 
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30 
 31  32  33  34  35  36  37  38  39  40  41  42  43  44  45 
 46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
 91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 
106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 
151 152 153 154 155 156 157 158 
 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   36
 tracks =  34 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   40
 tracks =  37 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   38
 tracks =  35 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   44
 tracks =  44 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   40
 tracks =  36 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   39
 tracks =  36 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   38
 tracks =  36 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 19680
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:18000
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =   43
 tracks =  43 at attempts =  1000
 removing redundant feed-through pins
 the connectivity of all the nets is verified


***********************************************
*ACTUAL* FINAL NUMBER OF ROUTING TRACKS: 34
***********************************************


TimberWolfSC terminated normally with no errors and 0 warning[s]


twflow terminated normally with no errors and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -645.0 ybot = -495.0 xtop = 17925.0 ytop = 15195.0
Core values: 120.0 150.0 18120.0 15150.0
Offsets: 120.0 150.0
3 routing layers
53 horizontal tracks from -300.0 to 15600.0 step 300 (M1, M3, ...)
79 vertical tracks from -480.0 to 18480.0 step 240.0 (M2, M4, ...)
Done with place2def.tcl
Running addspacers.tcl  arbiter /usr/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file arbiter.def. . .
Number of rows is 5
Longest row has width 181.2 um
Analysis of DEF file:
Number of components = 73
New number of components = 78
Number of rows = 5
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file arbiter.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Qflow/ejercicio2/arbiter/synthesis/arbiter.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on dom 15 nov 23:26:54 CST 2020
