Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `contador32bits.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `contador32bits.v' to AST representation.
Generating RTLIL representation for module `\contador'.
Generating RTLIL representation for module `\contador32bits'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \contador32bits
Used module:     \contador

3.1.2. Analyzing design hierarchy..
Top module:  \contador32bits
Used module:     \contador
Removed 0 unused modules.
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$20[0].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$19[4].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$18[8].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$17[12].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$16[16].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$15[20].op (contador).
Mapping positional arguments of cell contador32bits.\$genblock$contador32bits.v:36$14[24].op (contador).
Mapping positional arguments of cell contador32bits.op (contador).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$contador.v:18$1 in module contador.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\contador.$proc$contador.v:17$13'.
  Set init value: \Q = 4'0000

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\contador.$proc$contador.v:17$13'.
     1/1: $7\Q[3:0]
Creating decoders for process `\contador.$proc$contador.v:18$1'.
     1/24: $6\Q[3:0]
     2/24: $9\rco[0:0]
     3/24: $6\load[0:0]
     4/24: $8\rco[0:0]
     5/24: $5\Q[3:0]
     6/24: $7\rco[0:0]
     7/24: $5\load[0:0]
     8/24: $6\rco[0:0]
     9/24: $4\Q[3:0]
    10/24: $5\rco[0:0]
    11/24: $4\load[0:0]
    12/24: $4\rco[0:0]
    13/24: $3\rco[0:0]
    14/24: $3\load[0:0]
    15/24: $3\Q[3:0]
    16/24: $2\Q[3:0]
    17/24: $2\rco[0:0]
    18/24: $2\load[0:0]
    19/24: $1\rco[0:0]
    20/24: $1\load[0:0]
    21/24: $1\Q[3:0]
    22/24: $0\rco[0:0]
    23/24: $0\load[0:0]
    24/24: $0\Q[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\contador.\Q' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$177' with positive edge clock.
Creating register for signal `\contador.\load' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$178' with positive edge clock.
Creating register for signal `\contador.\rco' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$179' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `contador.$proc$contador.v:17$13'.
Found and cleaned up 9 empty switches in `\contador.$proc$contador.v:18$1'.
Removing empty process `contador.$proc$contador.v:18$1'.
Cleaned up 9 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$contador.v:21$2' (1) in module `\contador' with constant driver `$eq$contador.v:21$2_Y = \reset'.
Replacing $eq cell `$eq$contador.v:26$3' (1) in module `\contador' with constant driver `$eq$contador.v:26$3_Y = \enable'.
Replacing $eq cell `$eq$contador.v:38$6' (1) in module `\contador' with constant driver `$eq$contador.v:38$6_Y = \reset'.
Replacing $eq cell `$eq$contador.v:45$8' in module `contador' with $logic_not.
Replacing $eq cell `$eq$contador.v:52$9' (1) in module `\contador' with constant driver `$eq$contador.v:52$9_Y = \reset'.
Replacing $eq cell `$eq$contador.v:66$12' (1) in module `\contador' with constant driver `$eq$contador.v:66$12_Y = \reset'.
Replacing $eq cell `$procmux$104_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$115_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$126_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$137_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$145_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$153_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$161_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$166_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$171_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$176_CMP0' in module `contador' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador32bits..
Finding unused cells or wires in module \contador..

3.5. Executing CHECK pass (checking for obvious problems).
checking module contador..
checking module contador32bits..
Warning: multiple conflicting drivers for contador32bits.\load:
    port load[0] of cell \$genblock$contador32bits.v:36$14[24].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$15[20].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$16[16].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$17[12].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$18[8].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$19[4].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$20[0].op (contador)
    port load[0] of cell op (contador)
Warning: Wire contador32bits.\rco is used but has no driver.
found and reported 2 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$procmux$115_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$115_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$115_CMP0' from module `\contador'.
  Cell `$procmux$126_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$126_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$126_CMP0' from module `\contador'.
  Cell `$procmux$137_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$137_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$137_CMP0' from module `\contador'.
  Cell `$procmux$145_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$145_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$145_CMP0' from module `\contador'.
  Cell `$procmux$153_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$153_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$153_CMP0' from module `\contador'.
  Cell `$procmux$161_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$161_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$161_CMP0' from module `\contador'.
  Cell `$procmux$166_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$166_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$166_CMP0' from module `\contador'.
  Cell `$procmux$168_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$168_CMP = $procmux$163_CMP
    Removing $eq cell `$procmux$168_CMP0' from module `\contador'.
  Cell `$procmux$169_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$169_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$169_CMP0' from module `\contador'.
  Cell `$procmux$170_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$170_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$170_CMP0' from module `\contador'.
  Cell `$procmux$171_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$171_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$171_CMP0' from module `\contador'.
  Cell `$procmux$173_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$173_CMP = $procmux$163_CMP
    Removing $eq cell `$procmux$173_CMP0' from module `\contador'.
  Cell `$procmux$174_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$174_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$174_CMP0' from module `\contador'.
  Cell `$procmux$175_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$175_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$175_CMP0' from module `\contador'.
  Cell `$procmux$176_CMP0' is identical to cell `$procmux$104_CMP0'.
    Redirecting output \Y: $procmux$176_CMP = $procmux$104_CMP
    Removing $logic_not cell `$procmux$176_CMP0' from module `\contador'.
  Cell `$procmux$25_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$25_CMP = $procmux$163_CMP
    Removing $eq cell `$procmux$25_CMP0' from module `\contador'.
  Cell `$procmux$29_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$29_CMP = $procmux$163_CMP
    Removing $eq cell `$procmux$29_CMP0' from module `\contador'.
  Cell `$procmux$34_CMP0' is identical to cell `$procmux$163_CMP0'.
    Redirecting output \Y: $procmux$34_CMP = $procmux$163_CMP
    Removing $eq cell `$procmux$34_CMP0' from module `\contador'.
  Cell `$procmux$43_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$43_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$43_CMP0' from module `\contador'.
  Cell `$procmux$49_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$49_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$49_CMP0' from module `\contador'.
  Cell `$procmux$55_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$55_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$55_CMP0' from module `\contador'.
  Cell `$procmux$60_CMP0' is identical to cell `$procmux$164_CMP0'.
    Redirecting output \Y: $procmux$60_CMP = $procmux$164_CMP
    Removing $eq cell `$procmux$60_CMP0' from module `\contador'.
  Cell `$procmux$70_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$70_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$70_CMP0' from module `\contador'.
  Cell `$procmux$77_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$77_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$77_CMP0' from module `\contador'.
  Cell `$procmux$84_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$84_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$84_CMP0' from module `\contador'.
  Cell `$procmux$90_CMP0' is identical to cell `$procmux$165_CMP0'.
    Redirecting output \Y: $procmux$90_CMP = $procmux$165_CMP
    Removing $eq cell `$procmux$90_CMP0' from module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 26 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$162 (pure)
    Root of a mux tree: $procmux$167 (pure)
    Root of a mux tree: $procmux$172 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$152.
    dead port 2/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$101.
    dead port 2/2 on $mux $procmux$103.
    dead port 1/2 on $mux $procmux$112.
    dead port 2/2 on $mux $procmux$114.
    dead port 2/2 on $mux $procmux$24.
    dead port 2/2 on $mux $procmux$28.
    dead port 1/2 on $mux $procmux$123.
    dead port 2/2 on $mux $procmux$33.
    dead port 2/2 on $mux $procmux$125.
    dead port 1/2 on $mux $procmux$40.
    dead port 2/2 on $mux $procmux$42.
    dead port 2/2 on $mux $procmux$48.
    dead port 2/2 on $mux $procmux$54.
    dead port 1/2 on $mux $procmux$134.
    dead port 2/2 on $mux $procmux$59.
    dead port 2/2 on $mux $procmux$136.
    dead port 1/2 on $mux $procmux$67.
    dead port 2/2 on $mux $procmux$69.
    dead port 2/2 on $mux $procmux$76.
    dead port 2/2 on $mux $procmux$83.
    dead port 2/2 on $mux $procmux$144.
    dead port 2/2 on $mux $procmux$89.
    dead port 2/2 on $mux $procmux$98.
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 25 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
    New ctrl vector for $pmux cell $procmux$167: { $procmux$104_CMP $auto$opt_reduce.cc:132:opt_mux$181 $procmux$163_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$180: { $procmux$164_CMP $procmux$165_CMP }
  Optimizing cells in module \contador.
  Optimizing cells in module \contador32bits.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$162 (pure)
    Root of a mux tree: $procmux$167 (pure)
    Root of a mux tree: $procmux$172 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
  Optimizing cells in module \contador32bits.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell contador.$procmux$165_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module contador:
  creating $macc model for $add$contador.v:27$4 ($add).
  creating $macc model for $add$contador.v:57$10 ($add).
  creating $macc model for $sub$contador.v:43$7 ($sub).
  creating $alu model for $macc $sub$contador.v:43$7.
  creating $alu model for $macc $add$contador.v:57$10.
  creating $alu model for $macc $add$contador.v:27$4.
  creating $alu cell for $add$contador.v:27$4: $auto$alumacc.cc:470:replace_alu$182
  creating $alu cell for $add$contador.v:57$10: $auto$alumacc.cc:470:replace_alu$185
  creating $alu cell for $sub$contador.v:43$7: $auto$alumacc.cc:470:replace_alu$188
  created 3 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module contador32bits:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$162 (pure)
    Root of a mux tree: $procmux$167 (pure)
    Root of a mux tree: $procmux$172 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
  Optimizing cells in module \contador32bits.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$31' in module `contador' with inverter.
Replacing $mux cell `$procmux$37' (mux_bool) in module `\contador' with constant driver `$8\rco[0:0] = $eq$contador.v:59$11_Y'.
Replacing $mux cell `$procmux$64' (mux_bool) in module `\contador' with constant driver `$6\rco[0:0] = $eq$contador.v:45$8_Y'.
Replacing $mux cell `$procmux$96' (mux_bool) in module `\contador' with constant driver `$4\rco[0:0] = $eq$contador.v:29$5_Y'.
Optimized away 1 select inputs of $pmux cell `$procmux$162' in module `contador'.
Optimized away 1 select inputs of $pmux cell `$procmux$167' in module `contador'.
Optimized away 1 select inputs of $pmux cell `$procmux$172' in module `contador'.
Setting undriven signal in contador32bits to undef: \rco

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
  removing unused `$logic_not' cell `$procmux$104_CMP0'.
Finding unused cells or wires in module \contador32bits..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$162 (pure)
    Root of a mux tree: $procmux$167 (pure)
    Root of a mux tree: $procmux$172 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
  Optimizing cells in module \contador32bits.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping contador.$eq$contador.v:29$5 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$182 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.
Mapping contador.$eq$contador.v:45$8 ($logic_not) with simplemap.
Mapping contador.$eq$contador.v:59$11 ($eq) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 2
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4'.

3.18.5. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$185 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4.
Mapping contador.$procmux$22 ($mux) with simplemap.
Mapping contador.$procmux$31 ($not) with simplemap.
Mapping contador.$procmux$46 ($mux) with simplemap.
Mapping contador.$procmux$52 ($mux) with simplemap.
Mapping contador.$procmux$74 ($mux) with simplemap.
Mapping contador.$procmux$81 ($mux) with simplemap.
Mapping contador.$auto$opt_reduce.cc:126:opt_mux$180 ($reduce_or) with simplemap.
Mapping contador.$procmux$109 ($mux) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4'.

3.18.7. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$188 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4.
Mapping contador.$procmux$120 ($mux) with simplemap.
Mapping contador.$procmux$131 ($mux) with simplemap.
Mapping contador.$procmux$142 ($mux) with simplemap.
Mapping contador.$procmux$150 ($mux) with simplemap.
Mapping contador.$procmux$158 ($mux) with simplemap.
Mapping contador.$procmux$163_CMP0 ($eq) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=3'.

3.18.9. Continuing TECHMAP pass.
Mapping contador.$procmux$162 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=3.
Mapping contador.$procmux$164_CMP0 ($eq) with simplemap.
Mapping contador.$procmux$165_CMP0 ($eq) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.11. Continuing TECHMAP pass.
Mapping contador.$procmux$167 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=3'.

3.18.13. Continuing TECHMAP pass.
Mapping contador.$procmux$172 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=3.
Mapping contador.$procdff$177 ($dff) with simplemap.
Mapping contador.$procdff$178 ($dff) with simplemap.
Mapping contador.$procdff$179 ($dff) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:263$254 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.$and$<techmap.v>:260$252 ($and) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.15. Executing PROC pass (convert processes to netlists).

3.18.15.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.15.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.15.3. Executing PROC_INIT pass (extract init attributes).

3.18.15.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.15.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$392'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.15.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$392'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$392'.

3.18.15.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.15.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$392'.
Cleaned up 0 empty switches.

3.18.16. Executing OPT pass (performing simple optimizations).

3.18.16.1. Executing OPT_EXPR pass (perform const folding).

3.18.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:222$397'.
  removing unused `$and' cell `$and$<techmap.v>:222$403'.
  removing unused `$and' cell `$and$<techmap.v>:230$406'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.16.5. Finished fast OPT passes.

3.18.17. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$182.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.$ternary$<techmap.v>:258$251 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.$not$<techmap.v>:258$250 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$182.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$182.A_conv ($pos) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:263$280 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.$and$<techmap.v>:260$278 ($and) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$185.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.$ternary$<techmap.v>:258$277 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.$not$<techmap.v>:258$276 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$185.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$185.A_conv ($pos) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:262$302 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:263$303 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.$and$<techmap.v>:260$301 ($and) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$188.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.$ternary$<techmap.v>:258$300 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.$not$<techmap.v>:258$299 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$188.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$188.A_conv ($pos) with simplemap.
Mapping contador.$techmap$procmux$162.$and$<techmap.v>:434$329 ($and) with simplemap.
Mapping contador.$techmap$procmux$162.$reduce_or$<techmap.v>:441$330 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$162.$and$<techmap.v>:434$328 ($and) with simplemap.
Mapping contador.$techmap$procmux$162.$and$<techmap.v>:434$327 ($and) with simplemap.
Mapping contador.$techmap$procmux$162.$ternary$<techmap.v>:445$326 ($mux) with simplemap.
Mapping contador.$techmap$procmux$162.$reduce_or$<techmap.v>:445$325 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$167.$and$<techmap.v>:434$354 ($and) with simplemap.
Mapping contador.$techmap$procmux$167.$reduce_or$<techmap.v>:441$355 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$167.$and$<techmap.v>:434$353 ($and) with simplemap.
Mapping contador.$techmap$procmux$167.$ternary$<techmap.v>:445$352 ($mux) with simplemap.
Mapping contador.$techmap$procmux$167.$reduce_or$<techmap.v>:445$351 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$172.$reduce_or$<techmap.v>:441$363 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$172.$reduce_or$<techmap.v>:441$364 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$172.$reduce_or$<techmap.v>:441$362 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$172.$reduce_or$<techmap.v>:441$361 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$172.$and$<techmap.v>:434$360 ($and) with simplemap.
Mapping contador.$techmap$procmux$172.$and$<techmap.v>:434$359 ($and) with simplemap.
Mapping contador.$techmap$procmux$172.$and$<techmap.v>:434$358 ($and) with simplemap.
Mapping contador.$techmap$procmux$172.$ternary$<techmap.v>:445$357 ($mux) with simplemap.
Mapping contador.$techmap$procmux$172.$reduce_or$<techmap.v>:445$356 ($reduce_or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:229$405 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:221$402 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:221$399 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:221$396 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:212$394 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:229$404 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:222$400 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$401 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$398 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$395 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:212$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:212$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$395 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$398 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$401 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:222$400 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:229$404 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:212$394 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:221$396 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:221$399 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:221$402 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:229$405 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:212$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:221$395 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:221$398 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:221$401 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:222$400 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:229$404 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$or$<techmap.v>:212$394 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$or$<techmap.v>:221$396 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$or$<techmap.v>:221$399 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$or$<techmap.v>:221$402 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$or$<techmap.v>:229$405 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$410' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$ternary$<techmap.v>:258$251_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$374' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253_Y [3] = \Q [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$409' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$ternary$<techmap.v>:258$251_Y [2] = \Q [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$382' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$and$<techmap.v>:260$252_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$373' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$408' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$ternary$<techmap.v>:258$251_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$381' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$and$<techmap.v>:260$252_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$372' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253_Y [1] = \Q [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$407' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$ternary$<techmap.v>:258$251_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$380' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$and$<techmap.v>:260$252_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$522' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:212$393_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$516' (?0) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$184 [0] = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$515' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$184 [1] = $techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$395_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$512' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$184 [2] = $techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:229$404_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$375' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:263$254_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$431' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$ternary$<techmap.v>:258$277_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$418' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279_Y [3] = \Q [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$430' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$ternary$<techmap.v>:258$277_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$417' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$429' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$ternary$<techmap.v>:258$277_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$425' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$and$<techmap.v>:260$278_Y [1] = \Q [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$428' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$ternary$<techmap.v>:258$277_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$424' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$and$<techmap.v>:260$278_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$523' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:212$393_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$529' (?0) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$187 [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$427' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$and$<techmap.v>:260$278_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$426' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$and$<techmap.v>:260$278_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$525' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$398_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$531' (00) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$or$<techmap.v>:221$399_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$532' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$187 [3] = $techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$401_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$423' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:263$280_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$401_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$533' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$187 [2] = $techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:229$404_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$419' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:263$280_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279_Y [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$453' (1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$not$<techmap.v>:258$299_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$449' (101) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$ternary$<techmap.v>:258$300_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$436' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:262$302_Y [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$454' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$not$<techmap.v>:258$299_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$450' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$ternary$<techmap.v>:258$300_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$445' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$and$<techmap.v>:260$301_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$534' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:212$393_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$540' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$190 [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$455' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$not$<techmap.v>:258$299_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$451' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$ternary$<techmap.v>:258$300_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$446' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$and$<techmap.v>:260$301_Y [1] = \Q [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$456' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$not$<techmap.v>:258$299_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$452' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$ternary$<techmap.v>:258$300_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$447' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$and$<techmap.v>:260$301_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$333' (?0) in module `\contador' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$331 [0] = \mode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$344' (?0) in module `\contador' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$341 [1] = \mode [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$383' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$and$<techmap.v>:260$252_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$520' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$398_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$514' (00) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$or$<techmap.v>:221$399_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$513' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$184 [3] = $techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$401_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$379' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:263$254_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:221$401_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$448' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$and$<techmap.v>:260$301_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$444' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:263$303_Y [4] = $auto$alumacc.cc:484:replace_alu$190 [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$463' (const_and) in module `\contador' with constant driver `$techmap$procmux$162.$and$<techmap.v>:434$327_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$459' (0?) in module `\contador' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$458 = $techmap$procmux$162.$and$<techmap.v>:434$328_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$469' (const_and) in module `\contador' with constant driver `$techmap$procmux$167.$and$<techmap.v>:434$354_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$471' (?0) in module `\contador' with constant driver `$techmap$procmux$167.$reduce_or$<techmap.v>:441$355_Y = $techmap$procmux$167.$and$<techmap.v>:434$353_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$415' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$440'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:263$303_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$415' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$518' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$527'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$182.lcu.$and$<techmap.v>:222$400_Y = $techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:222$400_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$518' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$371' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$440'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$182.$xor$<techmap.v>:262$253_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:263$303_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$371' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$432' is identical to cell `$auto$simplemap.cc:37:simplemap_not$411'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$185.$not$<techmap.v>:258$276_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$182.$not$<techmap.v>:258$250_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$432' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$317' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$343'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$315 [0] = $auto$simplemap.cc:250:simplemap_eqne$341 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$317' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$318' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$334'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$315 [1] = $auto$simplemap.cc:250:simplemap_eqne$331 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$318' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$437' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$416'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:262$302_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:262$279_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$437' from module `\contador'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$286' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$291'.
    Redirecting output \Y: $5\Q[3:0] [0] = $4\Q[3:0] [0]
    Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$286' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$535' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$524'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$188.lcu.$and$<techmap.v>:221$395_Y = $techmap$auto$alumacc.cc:470:replace_alu$185.lcu.$and$<techmap.v>:221$395_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$535' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$413' is identical to cell `$auto$simplemap.cc:37:simplemap_not$434'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$182.$not$<techmap.v>:258$250_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$185.$not$<techmap.v>:258$276_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$413' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$414' is identical to cell `$auto$simplemap.cc:37:simplemap_not$435'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$182.$not$<techmap.v>:258$250_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$185.$not$<techmap.v>:258$276_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$414' from module `\contador'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$509' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$466'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$508 = $auto$simplemap.cc:127:simplemap_reduce$465
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$509' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$530' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$541'.
    Redirecting output \Y: $auto$alumacc.cc:484:replace_alu$187 [1] = $auto$alumacc.cc:484:replace_alu$190 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$530' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$237' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$263'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$235 [0] = $auto$simplemap.cc:250:simplemap_eqne$261 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$237' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$433' is identical to cell `$auto$simplemap.cc:37:simplemap_not$412'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$185.$not$<techmap.v>:258$276_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$182.$not$<techmap.v>:258$250_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$433' from module `\contador'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$511' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$468'.
    Redirecting output \Y: $techmap$procmux$172.$reduce_or$<techmap.v>:445$356_Y = $techmap$procmux$162.$reduce_or$<techmap.v>:445$325_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$511' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$441' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$420'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$188.$xor$<techmap.v>:263$303_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$185.$xor$<techmap.v>:263$280_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$441' from module `\contador'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$287' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$292'.
    Redirecting output \Y: $5\Q[3:0] [1] = $4\Q[3:0] [1]
    Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$287' from module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 18 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$412'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$411'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$434'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$435'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$519'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$526'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$527'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$536'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$537'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$538'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$542'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$543'.
Finding unused cells or wires in module \contador32bits..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\contador' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 121 wires to a netlist network with 14 inputs and 6 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       14
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:              OAI4 cells:        7
ABC RESULTS:                OR cells:        7
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

3.20.2. Extracting gate netlist of module `\contador32bits' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$545$auto$blifparse.cc:286:parse_blif$597' in module `contador'.
Optimizing away select inverter for $_MUX_ cell `$abc$545$auto$blifparse.cc:286:parse_blif$588' in module `contador'.
Optimizing away select inverter for $_MUX_ cell `$abc$545$auto$blifparse.cc:286:parse_blif$595' in module `contador'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$abc$545$auto$blifparse.cc:286:parse_blif$575' is identical to cell `$abc$545$auto$blifparse.cc:286:parse_blif$564'.
    Redirecting output \Y: $abc$545$n50 = $abc$545$n39
    Removing $_XOR_ cell `$abc$545$auto$blifparse.cc:286:parse_blif$575' from module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 1 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \contador32bits
Used module:     \contador

3.22.2. Analyzing design hierarchy..
Top module:  \contador32bits
Used module:     \contador
Removed 0 unused modules.

3.23. Printing statistics.

=== contador ===

   Number of wires:                 78
   Number of wire bits:             88
   Number of public wires:           8
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_AND_                         14
     $_AOI3_                         7
     $_AOI4_                         2
     $_DFF_P_                        6
     $_MUX_                          3
     $_NAND_                         6
     $_NOR_                          7
     $_NOT_                         12
     $_OAI3_                         1
     $_OAI4_                         7
     $_OR_                           7
     $_XNOR_                         2
     $_XOR_                          5

=== contador32bits ===

   Number of wires:                  9
   Number of wire bits:             51
   Number of public wires:           9
   Number of public wire bits:      51
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     contador                        8

=== design hierarchy ===

   contador32bits                    1
     contador                        8

   Number of wires:                633
   Number of wire bits:            755
   Number of public wires:          73
   Number of public wire bits:     171
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                632
     $_AND_                        112
     $_AOI3_                        56
     $_AOI4_                        16
     $_DFF_P_                       48
     $_MUX_                         24
     $_NAND_                        48
     $_NOR_                         56
     $_NOT_                         96
     $_OAI3_                         8
     $_OAI4_                        56
     $_OR_                          56
     $_XNOR_                        16
     $_XOR_                         40

3.24. Executing CHECK pass (checking for obvious problems).
checking module contador..
checking module contador32bits..
Warning: multiple conflicting drivers for contador32bits.\load:
    port load[0] of cell \$genblock$contador32bits.v:36$14[24].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$15[20].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$16[16].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$17[12].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$18[8].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$19[4].op (contador)
    port load[0] of cell \$genblock$contador32bits.v:36$20[0].op (contador)
    port load[0] of cell op (contador)
found and reported 1 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\contador':
  mapped 6 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\contador32bits':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
  Optimizing cells in module \contador32bits.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
Finding unused cells or wires in module \contador32bits..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\contador' to `<abc-temp-dir>/input.blif'..
Extracted 73 gates and 87 wires to a netlist network with 14 inputs and 6 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:       67
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

6.2. Extracting gate netlist of module `\contador32bits' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping contador32bits.op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$14[24].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$15[20].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$16[16].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$17[12].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$18[8].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$19[4].op using contador.
Mapping contador32bits.\$genblock$contador32bits.v:36$20[0].op using contador.
No more expansions possible.
Deleting now unused module contador.
Removed 13 unused cells and 758 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port contador32bits.D: Missing option -inpad.
Mapping port contador32bits.Q using BUFX2.
Don't map input port contador32bits.clk: Missing option -inpad.
Don't map input port contador32bits.enable: Missing option -inpad.
Mapping port contador32bits.load using BUFX2.
Don't map input port contador32bits.mode: Missing option -inpad.
Mapping port contador32bits.rco using BUFX2.
Don't map input port contador32bits.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador32bits..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador32bits.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador32bits'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador32bits..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 415cf01939
CPU: user 0.72s system 0.01s, MEM: 37.90 MB total, 10.86 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 13% 16x opt_clean (0 sec), 12% 17x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 9 (load 3070.58) from node \$genblock$contador32bits.v:36$14<24>.op.Q<1>,
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 5.58533 (latency = 1675.6 ps)
Top input node fanout is 47 (load 2346.66) from node clk.
Warning 1: load of 580.721 is 1.05632 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 602.3 is 1.09558 times greater than strongest gate DFFPOSX1
Warning 3: load of 3080.58 is 5.60352 times greater than strongest gate DFFPOSX1
24 gates exceed specified minimum load.
18 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 555    	Out: 555    	+0
	"2" gates	In: 42    	Out: 42    	+0

gates resized: 18
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 9 (load 3070.58) from node \$genblock$contador32bits.v:36$14<24>.op.Q<1>,
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 5.58533 (latency = 1675.6 ps)
Top input node fanout is 8 (load 258.459) from node D<3>.
Warning 1: load of 580.721 is 1.05632 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 602.3 is 1.09558 times greater than strongest gate DFFPOSX1
Warning 3: load of 3080.58 is 5.60352 times greater than strongest gate DFFPOSX1
24 gates exceed specified minimum load.
0 buffers were added.
6 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 555    	Out: 555    	+0
	"2" gates	In: 60    	Out: 54    	-6

gates resized: 6
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 9 (load 3070.58) from node \$genblock$contador32bits.v:36$14<24>.op.Q<1>,
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 5.58533 (latency = 1675.6 ps)
Top input node fanout is 8 (load 258.459) from node D<3>.
Warning 1: load of 785.724 is 1.13538 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 9: load of 3080.58 is 5.60352 times greater than strongest gate DFFPOSX1
30 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 555    	Out: 555    	+0
	"2" gates	In: 54    	Out: 54    	+0
	"4" gates	In: 6    	Out: 6    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on mié 2 dic 23:06:16 CST 2020
Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu050/osu050_stdcells.lef) for reading...
Loaded BLIF file (/home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.blif) for reading ...
Loaded CEL file (/home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/layout/contador32bits.cel) for writing...
1st pass of blif file /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 360 -750 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -480 -150 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -240 -450 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 479 -150 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 240 -450 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -240 -150 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 240 -450 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX4:  Ports are:
parse_pin
macroname: BUFX4, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: BUFX4, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: BUFX4, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: BUFX4, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 1320 -150 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -1080 -450 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -361 -150 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -120 -750 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 240 150 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -360 150 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 120 449 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y 360 150 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -240 -750 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 240 -150 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 360 150 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -450 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro OAI22X1:  Ports are:
parse_pin
macroname: OAI22X1, pinname: A
Port type: INPUT 
A -480 -450 1
parse_pin
macroname: OAI22X1, pinname: B
Port type: INPUT 
B -240 -150 1
parse_pin
macroname: OAI22X1, pinname: C
Port type: INPUT 
C 479 -450 1
parse_pin
macroname: OAI22X1, pinname: D
Port type: INPUT 
D 240 -150 1
parse_pin
macroname: OAI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: OAI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: OAI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro XOR2X1:  Ports are:
parse_pin
macroname: XOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: XOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XNOR2X1:  Ports are:
parse_pin
macroname: XNOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XNOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XNOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XNOR2X1, pinname: Y
Port type: OUTPUT 
Y 239 -150 1
parse_pin
macroname: XNOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No contador32bits.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
Read  550 objects so far...
Read  600 objects so far...
Read  650 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :615
Total cell width   :6.10e+05
Total cell height  :1.84e+06
Total cell area    :1.83e+09
Total core area    :1.83e+09
Average cell height:3.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Read  100 objects so far...
Read  150 objects so far...
Read  200 objects so far...
Read  250 objects so far...
Read  300 objects so far...
Read  350 objects so far...
Read  400 objects so far...
Read  450 objects so far...
Read  500 objects so far...
Read  550 objects so far...
Read  600 objects so far...
Read  650 objects so far...
Splitting contador32bits.cel into contador32bits.scel and contador32bits.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]



TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University
  0 
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30 
 31  32  33  34  35  36  37  38  39  40  41  42  43  44  45 
 46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
 91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 
106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 
151 152 153 154 155 156 157 158 
 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  121
 tracks = 109 at attempts =  1000
 tracks = 106 at attempts =  2000
 tracks = 105 at attempts =  3000
 tracks = 104 at attempts =  4000
 tracks = 104 at attempts =  5000
 tracks = 104 at attempts =  6000
 tracks = 104 at attempts =  7000
 tracks = 104 at attempts =  8000
 tracks = 104 at attempts =  9000
 tracks = 104 at attempts = 10000
 tracks = 104 at attempts = 11000
 tracks = 104 at attempts = 12000
 tracks = 104 at attempts = 13000
 tracks = 104 at attempts = 14000
 tracks = 104 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  120
 tracks = 110 at attempts =  1000
 tracks = 109 at attempts =  2000
 tracks = 109 at attempts =  3000
 tracks = 108 at attempts =  4000
 tracks = 107 at attempts =  5000
 tracks = 107 at attempts =  6000
 tracks = 107 at attempts =  7000
 tracks = 107 at attempts =  8000
 tracks = 107 at attempts =  9000
 tracks = 107 at attempts = 10000
 tracks = 107 at attempts = 11000
 tracks = 107 at attempts = 12000
 tracks = 107 at attempts = 13000
 tracks = 107 at attempts = 14000
 tracks = 107 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  127
 tracks = 113 at attempts =  1000
 tracks = 110 at attempts =  2000
 tracks = 110 at attempts =  3000
 tracks = 110 at attempts =  4000
 tracks = 110 at attempts =  5000
 tracks = 110 at attempts =  6000
 tracks = 110 at attempts =  7000
 tracks = 110 at attempts =  8000
 tracks = 110 at attempts =  9000
 tracks = 110 at attempts = 10000
 tracks = 110 at attempts = 11000
 tracks = 110 at attempts = 12000
 tracks = 110 at attempts = 13000
 tracks = 110 at attempts = 14000
 tracks = 110 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  156
 tracks = 155 at attempts =  1000
 tracks = 155 at attempts =  2000
 tracks = 155 at attempts =  3000
 tracks = 155 at attempts =  4000
 tracks = 155 at attempts =  5000
 tracks = 155 at attempts =  6000
 tracks = 155 at attempts =  7000
 tracks = 155 at attempts =  8000
 tracks = 155 at attempts =  9000
 tracks = 155 at attempts = 10000
 tracks = 155 at attempts = 11000
 tracks = 155 at attempts = 12000
 tracks = 155 at attempts = 13000
 tracks = 155 at attempts = 14000
 tracks = 155 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  128
 tracks = 111 at attempts =  1000
 tracks = 108 at attempts =  2000
 tracks = 108 at attempts =  3000
 tracks = 107 at attempts =  4000
 tracks = 107 at attempts =  5000
 tracks = 107 at attempts =  6000
 tracks = 107 at attempts =  7000
 tracks = 107 at attempts =  8000
 tracks = 107 at attempts =  9000
 tracks = 107 at attempts = 10000
 tracks = 107 at attempts = 11000
 tracks = 107 at attempts = 12000
 tracks = 107 at attempts = 13000
 tracks = 107 at attempts = 14000
 tracks = 107 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  123
 tracks = 113 at attempts =  1000
 tracks = 109 at attempts =  2000
 tracks = 108 at attempts =  3000
 tracks = 108 at attempts =  4000
 tracks = 108 at attempts =  5000
 tracks = 108 at attempts =  6000
 tracks = 108 at attempts =  7000
 tracks = 108 at attempts =  8000
 tracks = 108 at attempts =  9000
 tracks = 108 at attempts = 10000
 tracks = 108 at attempts = 11000
 tracks = 108 at attempts = 12000
 tracks = 108 at attempts = 13000
 tracks = 108 at attempts = 14000
 tracks = 108 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  127
 tracks = 115 at attempts =  1000
 tracks = 111 at attempts =  2000
 tracks = 111 at attempts =  3000
 tracks = 111 at attempts =  4000
 tracks = 111 at attempts =  5000
 tracks = 111 at attempts =  6000
 tracks = 111 at attempts =  7000
 tracks = 111 at attempts =  8000
 tracks = 111 at attempts =  9000
 tracks = 111 at attempts = 10000
 tracks = 111 at attempts = 11000
 tracks = 111 at attempts = 12000
 tracks = 111 at attempts = 13000
 tracks = 111 at attempts = 14000
 tracks = 111 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 55920
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:10   Its length is:51120
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =  155
 tracks = 155 at attempts =  1000
 tracks = 155 at attempts =  2000
 tracks = 155 at attempts =  3000
 tracks = 155 at attempts =  4000
 tracks = 155 at attempts =  5000
 tracks = 155 at attempts =  6000
 tracks = 155 at attempts =  7000
 tracks = 155 at attempts =  8000
 tracks = 155 at attempts =  9000
 tracks = 155 at attempts = 10000
 tracks = 155 at attempts = 11000
 tracks = 155 at attempts = 12000
 tracks = 155 at attempts = 13000
 tracks = 155 at attempts = 14000
 tracks = 155 at attempts = 15000
 removing redundant feed-through pins
 the connectivity of all the nets is verified


***********************************************
*ACTUAL* FINAL NUMBER OF ROUTING TRACKS: 104
***********************************************


TimberWolfSC terminated normally with no errors and 0 warning[s]


twflow terminated normally with no errors and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -645.0 ybot = -495.0 xtop = 51045.0 ytop = 36195.0
Core values: 120.0 150.0 51240.0 36150.0
Offsets: 120.0 150.0
3 routing layers
123 horizontal tracks from -300.0 to 36600.0 step 300 (M1, M3, ...)
217 vertical tracks from -480.0 to 51600.0 step 240.0 (M2, M4, ...)
Caught GrayWolf being bad:  Pin Q<23> overlaps pin rco
Done with place2def.tcl
Running addspacers.tcl  contador32bits /usr/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file contador32bits.def. . .
Number of rows is 12
Longest row has width 512.4 um
Analysis of DEF file:
Number of components = 615
New number of components = 629
Number of rows = 12
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file contador32bits.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_32_bits/osu050/synthesis/contador32bits.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on mié 2 dic 23:14:22 CST 2020
