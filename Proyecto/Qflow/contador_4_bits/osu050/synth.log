Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `contador.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `contador.v' to AST representation.
Generating RTLIL representation for module `\contador'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \contador

3.1.2. Analyzing design hierarchy..
Top module:  \contador
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$contador.v:18$1 in module contador.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\contador.$proc$contador.v:17$13'.
  Set init value: \Q = 4'0000

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\contador.$proc$contador.v:17$13'.
     1/1: $7\Q[3:0]
Creating decoders for process `\contador.$proc$contador.v:18$1'.
     1/24: $6\Q[3:0]
     2/24: $9\rco[0:0]
     3/24: $6\load[0:0]
     4/24: $8\rco[0:0]
     5/24: $5\Q[3:0]
     6/24: $7\rco[0:0]
     7/24: $5\load[0:0]
     8/24: $6\rco[0:0]
     9/24: $4\Q[3:0]
    10/24: $5\rco[0:0]
    11/24: $4\load[0:0]
    12/24: $4\rco[0:0]
    13/24: $3\rco[0:0]
    14/24: $3\load[0:0]
    15/24: $3\Q[3:0]
    16/24: $2\Q[3:0]
    17/24: $2\rco[0:0]
    18/24: $2\load[0:0]
    19/24: $1\rco[0:0]
    20/24: $1\load[0:0]
    21/24: $1\Q[3:0]
    22/24: $0\rco[0:0]
    23/24: $0\load[0:0]
    24/24: $0\Q[3:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\contador.\Q' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$170' with positive edge clock.
Creating register for signal `\contador.\load' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$171' with positive edge clock.
Creating register for signal `\contador.\rco' using process `\contador.$proc$contador.v:18$1'.
  created $dff cell `$procdff$172' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `contador.$proc$contador.v:17$13'.
Found and cleaned up 9 empty switches in `\contador.$proc$contador.v:18$1'.
Removing empty process `contador.$proc$contador.v:18$1'.
Cleaned up 9 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$contador.v:21$2' (1) in module `\contador' with constant driver `$eq$contador.v:21$2_Y = \reset'.
Replacing $eq cell `$eq$contador.v:26$3' (1) in module `\contador' with constant driver `$eq$contador.v:26$3_Y = \enable'.
Replacing $eq cell `$eq$contador.v:38$6' (1) in module `\contador' with constant driver `$eq$contador.v:38$6_Y = \reset'.
Replacing $eq cell `$eq$contador.v:45$8' in module `contador' with $logic_not.
Replacing $eq cell `$eq$contador.v:52$9' (1) in module `\contador' with constant driver `$eq$contador.v:52$9_Y = \reset'.
Replacing $eq cell `$eq$contador.v:66$12' (1) in module `\contador' with constant driver `$eq$contador.v:66$12_Y = \reset'.
Replacing $eq cell `$procmux$97_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$108_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$119_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$130_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$138_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$146_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$154_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$159_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$164_CMP0' in module `contador' with $logic_not.
Replacing $eq cell `$procmux$169_CMP0' in module `contador' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.5. Executing CHECK pass (checking for obvious problems).
checking module contador..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$procmux$119_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$119_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$119_CMP0' from module `\contador'.
  Cell `$procmux$130_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$130_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$130_CMP0' from module `\contador'.
  Cell `$procmux$138_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$138_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$138_CMP0' from module `\contador'.
  Cell `$procmux$146_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$146_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$146_CMP0' from module `\contador'.
  Cell `$procmux$154_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$154_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$154_CMP0' from module `\contador'.
  Cell `$procmux$159_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$159_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$159_CMP0' from module `\contador'.
  Cell `$procmux$161_CMP0' is identical to cell `$procmux$156_CMP0'.
    Redirecting output \Y: $procmux$161_CMP = $procmux$156_CMP
    Removing $eq cell `$procmux$161_CMP0' from module `\contador'.
  Cell `$procmux$162_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$162_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$162_CMP0' from module `\contador'.
  Cell `$procmux$163_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$163_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$163_CMP0' from module `\contador'.
  Cell `$procmux$164_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$164_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$164_CMP0' from module `\contador'.
  Cell `$procmux$166_CMP0' is identical to cell `$procmux$156_CMP0'.
    Redirecting output \Y: $procmux$166_CMP = $procmux$156_CMP
    Removing $eq cell `$procmux$166_CMP0' from module `\contador'.
  Cell `$procmux$167_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$167_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$167_CMP0' from module `\contador'.
  Cell `$procmux$168_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$168_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$168_CMP0' from module `\contador'.
  Cell `$procmux$169_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$169_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$169_CMP0' from module `\contador'.
  Cell `$procmux$18_CMP0' is identical to cell `$procmux$156_CMP0'.
    Redirecting output \Y: $procmux$18_CMP = $procmux$156_CMP
    Removing $eq cell `$procmux$18_CMP0' from module `\contador'.
  Cell `$procmux$22_CMP0' is identical to cell `$procmux$156_CMP0'.
    Redirecting output \Y: $procmux$22_CMP = $procmux$156_CMP
    Removing $eq cell `$procmux$22_CMP0' from module `\contador'.
  Cell `$procmux$27_CMP0' is identical to cell `$procmux$156_CMP0'.
    Redirecting output \Y: $procmux$27_CMP = $procmux$156_CMP
    Removing $eq cell `$procmux$27_CMP0' from module `\contador'.
  Cell `$procmux$36_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$36_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$36_CMP0' from module `\contador'.
  Cell `$procmux$42_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$42_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$42_CMP0' from module `\contador'.
  Cell `$procmux$48_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$48_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$48_CMP0' from module `\contador'.
  Cell `$procmux$53_CMP0' is identical to cell `$procmux$157_CMP0'.
    Redirecting output \Y: $procmux$53_CMP = $procmux$157_CMP
    Removing $eq cell `$procmux$53_CMP0' from module `\contador'.
  Cell `$procmux$63_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$63_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$63_CMP0' from module `\contador'.
  Cell `$procmux$70_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$70_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$70_CMP0' from module `\contador'.
  Cell `$procmux$77_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$77_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$77_CMP0' from module `\contador'.
  Cell `$procmux$83_CMP0' is identical to cell `$procmux$158_CMP0'.
    Redirecting output \Y: $procmux$83_CMP = $procmux$158_CMP
    Removing $eq cell `$procmux$83_CMP0' from module `\contador'.
  Cell `$procmux$97_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$97_CMP = $procmux$108_CMP
    Removing $logic_not cell `$procmux$97_CMP0' from module `\contador'.
Removed a total of 26 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$155 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$165 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$153.
    dead port 1/2 on $mux $procmux$105.
    dead port 2/2 on $mux $procmux$107.
    dead port 1/2 on $mux $procmux$116.
    dead port 2/2 on $mux $procmux$17.
    dead port 2/2 on $mux $procmux$118.
    dead port 2/2 on $mux $procmux$21.
    dead port 2/2 on $mux $procmux$26.
    dead port 1/2 on $mux $procmux$33.
    dead port 2/2 on $mux $procmux$35.
    dead port 1/2 on $mux $procmux$127.
    dead port 2/2 on $mux $procmux$41.
    dead port 2/2 on $mux $procmux$129.
    dead port 2/2 on $mux $procmux$47.
    dead port 2/2 on $mux $procmux$52.
    dead port 1/2 on $mux $procmux$60.
    dead port 2/2 on $mux $procmux$62.
    dead port 2/2 on $mux $procmux$137.
    dead port 2/2 on $mux $procmux$69.
    dead port 2/2 on $mux $procmux$76.
    dead port 2/2 on $mux $procmux$82.
    dead port 2/2 on $mux $procmux$145.
    dead port 2/2 on $mux $procmux$91.
    dead port 1/2 on $mux $procmux$94.
    dead port 2/2 on $mux $procmux$96.
Removed 25 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
    New ctrl vector for $pmux cell $procmux$160: { $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$174 $procmux$156_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$173: { $procmux$157_CMP $procmux$158_CMP }
  Optimizing cells in module \contador.
Performed a total of 2 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$155 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$165 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell contador.$procmux$158_CMP0 ($eq).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module contador:
  creating $macc model for $add$contador.v:27$4 ($add).
  creating $macc model for $add$contador.v:57$10 ($add).
  creating $macc model for $sub$contador.v:43$7 ($sub).
  creating $alu model for $macc $sub$contador.v:43$7.
  creating $alu model for $macc $add$contador.v:57$10.
  creating $alu model for $macc $add$contador.v:27$4.
  creating $alu cell for $add$contador.v:27$4: $auto$alumacc.cc:470:replace_alu$175
  creating $alu cell for $add$contador.v:57$10: $auto$alumacc.cc:470:replace_alu$178
  creating $alu cell for $sub$contador.v:43$7: $auto$alumacc.cc:470:replace_alu$181
  created 3 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$155 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$165 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$24' in module `contador' with inverter.
Replacing $mux cell `$procmux$30' (mux_bool) in module `\contador' with constant driver `$8\rco[0:0] = $eq$contador.v:59$11_Y'.
Replacing $mux cell `$procmux$57' (mux_bool) in module `\contador' with constant driver `$6\rco[0:0] = $eq$contador.v:45$8_Y'.
Replacing $mux cell `$procmux$89' (mux_bool) in module `\contador' with constant driver `$4\rco[0:0] = $eq$contador.v:29$5_Y'.
Optimized away 1 select inputs of $pmux cell `$procmux$155' in module `contador'.
Optimized away 1 select inputs of $pmux cell `$procmux$160' in module `contador'.
Optimized away 1 select inputs of $pmux cell `$procmux$165' in module `contador'.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
  removing unused `$logic_not' cell `$procmux$108_CMP0'.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$155 (pure)
    Root of a mux tree: $procmux$160 (pure)
    Root of a mux tree: $procmux$165 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping contador.$eq$contador.v:29$5 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4'.

3.18.3. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$175 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=4\Y_WIDTH=4.
Mapping contador.$eq$contador.v:45$8 ($logic_not) with simplemap.
Mapping contador.$eq$contador.v:59$11 ($eq) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 2
Parameter \B_WIDTH = 4
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4'.

3.18.5. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$178 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=2\B_WIDTH=4\Y_WIDTH=4.
Mapping contador.$procmux$15 ($mux) with simplemap.
Mapping contador.$procmux$24 ($not) with simplemap.
Mapping contador.$procmux$39 ($mux) with simplemap.
Mapping contador.$procmux$45 ($mux) with simplemap.
Mapping contador.$procmux$67 ($mux) with simplemap.
Mapping contador.$procmux$74 ($mux) with simplemap.
Mapping contador.$auto$opt_reduce.cc:126:opt_mux$173 ($reduce_or) with simplemap.
Mapping contador.$procmux$102 ($mux) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 4
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4'.

3.18.7. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$181 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=4\B_WIDTH=1\Y_WIDTH=4.
Mapping contador.$procmux$113 ($mux) with simplemap.
Mapping contador.$procmux$124 ($mux) with simplemap.
Mapping contador.$procmux$135 ($mux) with simplemap.
Mapping contador.$procmux$143 ($mux) with simplemap.
Mapping contador.$procmux$151 ($mux) with simplemap.
Mapping contador.$procmux$156_CMP0 ($eq) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=3'.

3.18.9. Continuing TECHMAP pass.
Mapping contador.$procmux$155 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=3.
Mapping contador.$procmux$157_CMP0 ($eq) with simplemap.
Mapping contador.$procmux$158_CMP0 ($eq) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 1
Parameter \S_WIDTH = 2
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=1\S_WIDTH=2'.

3.18.11. Continuing TECHMAP pass.
Mapping contador.$procmux$160 using $paramod\_90_pmux\WIDTH=1\S_WIDTH=2.

3.18.12. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 3
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=3'.

3.18.13. Continuing TECHMAP pass.
Mapping contador.$procmux$165 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=3.
Mapping contador.$procdff$170 ($dff) with simplemap.
Mapping contador.$procdff$171 ($dff) with simplemap.
Mapping contador.$procdff$172 ($dff) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:263$247 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.$and$<techmap.v>:260$245 ($and) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=4'.

3.18.15. Executing PROC pass (convert processes to netlists).

3.18.15.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.15.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.15.3. Executing PROC_INIT pass (extract init attributes).

3.18.15.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.15.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$385'.
     1/8: $0\p[3:0] [2]
     2/8: $0\g[3:0] [2]
     3/8: $0\p[3:0] [3]
     4/8: $0\g[3:0] [3]
     5/8: $0\p[3:0] [1]
     6/8: $0\g[3:0] [1]
     7/8: $0\g[3:0] [0]
     8/8: $0\p[3:0] [0]

3.18.15.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\p' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$385'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=4.\g' from process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$385'.

3.18.15.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.15.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=4.$proc$<techmap.v>:207$385'.
Cleaned up 0 empty switches.

3.18.16. Executing OPT pass (performing simple optimizations).

3.18.16.1. Executing OPT_EXPR pass (perform const folding).

3.18.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=4'.
Removed a total of 0 cells.

3.18.16.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=4..
  removing unused `$and' cell `$and$<techmap.v>:222$390'.
  removing unused `$and' cell `$and$<techmap.v>:222$396'.
  removing unused `$and' cell `$and$<techmap.v>:230$399'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.16.5. Finished fast OPT passes.

3.18.17. Continuing TECHMAP pass.
Mapping contador.$auto$alumacc.cc:470:replace_alu$175.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.$ternary$<techmap.v>:258$244 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.$not$<techmap.v>:258$243 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$175.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$175.A_conv ($pos) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:263$273 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.$and$<techmap.v>:260$271 ($and) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$178.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.$ternary$<techmap.v>:258$270 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.$not$<techmap.v>:258$269 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$178.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$178.A_conv ($pos) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:262$295 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:263$296 ($xor) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.$and$<techmap.v>:260$294 ($and) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$181.lcu using $paramod\_90_lcu\WIDTH=4.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.$ternary$<techmap.v>:258$293 ($mux) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.$not$<techmap.v>:258$292 ($not) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$181.B_conv ($pos) with simplemap.
Mapping contador.$auto$alumacc.cc:470:replace_alu$181.A_conv ($pos) with simplemap.
Mapping contador.$techmap$procmux$155.$and$<techmap.v>:434$322 ($and) with simplemap.
Mapping contador.$techmap$procmux$155.$reduce_or$<techmap.v>:441$323 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$155.$and$<techmap.v>:434$321 ($and) with simplemap.
Mapping contador.$techmap$procmux$155.$and$<techmap.v>:434$320 ($and) with simplemap.
Mapping contador.$techmap$procmux$155.$ternary$<techmap.v>:445$319 ($mux) with simplemap.
Mapping contador.$techmap$procmux$155.$reduce_or$<techmap.v>:445$318 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$160.$and$<techmap.v>:434$347 ($and) with simplemap.
Mapping contador.$techmap$procmux$160.$reduce_or$<techmap.v>:441$348 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$160.$and$<techmap.v>:434$346 ($and) with simplemap.
Mapping contador.$techmap$procmux$160.$ternary$<techmap.v>:445$345 ($mux) with simplemap.
Mapping contador.$techmap$procmux$160.$reduce_or$<techmap.v>:445$344 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$165.$reduce_or$<techmap.v>:441$356 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$165.$reduce_or$<techmap.v>:441$357 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$165.$reduce_or$<techmap.v>:441$355 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$165.$reduce_or$<techmap.v>:441$354 ($reduce_or) with simplemap.
Mapping contador.$techmap$procmux$165.$and$<techmap.v>:434$353 ($and) with simplemap.
Mapping contador.$techmap$procmux$165.$and$<techmap.v>:434$352 ($and) with simplemap.
Mapping contador.$techmap$procmux$165.$and$<techmap.v>:434$351 ($and) with simplemap.
Mapping contador.$techmap$procmux$165.$ternary$<techmap.v>:445$350 ($mux) with simplemap.
Mapping contador.$techmap$procmux$165.$reduce_or$<techmap.v>:445$349 ($reduce_or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:229$398 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:221$395 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:221$392 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:221$389 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:212$387 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:229$397 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:222$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$394 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$391 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$388 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:212$386 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:212$386 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$388 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$391 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$394 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:222$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:229$397 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:212$387 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:221$389 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:221$392 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:221$395 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:229$398 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:212$386 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:221$388 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:221$391 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:221$394 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:222$393 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:229$397 ($and) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$or$<techmap.v>:212$387 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$or$<techmap.v>:221$389 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$or$<techmap.v>:221$392 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$or$<techmap.v>:221$395 ($or) with simplemap.
Mapping contador.$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$or$<techmap.v>:229$398 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$403' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$ternary$<techmap.v>:258$244_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$367' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246_Y [3] = \Q [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$402' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$ternary$<techmap.v>:258$244_Y [2] = \Q [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$375' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$and$<techmap.v>:260$245_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$366' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$401' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$ternary$<techmap.v>:258$244_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$374' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$and$<techmap.v>:260$245_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$365' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246_Y [1] = \Q [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$400' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$ternary$<techmap.v>:258$244_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$373' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$and$<techmap.v>:260$245_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$515' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:212$386_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$509' (?0) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$177 [0] = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$508' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$177 [1] = $techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$388_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$505' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$177 [2] = $techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:229$397_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$368' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:263$247_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$424' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$ternary$<techmap.v>:258$270_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$411' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272_Y [3] = \Q [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$423' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$ternary$<techmap.v>:258$270_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$410' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272_Y [2] = \Q [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$422' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$ternary$<techmap.v>:258$270_Y [1] = \Q [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$418' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$and$<techmap.v>:260$271_Y [1] = \Q [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$421' (??0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$ternary$<techmap.v>:258$270_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$417' (1?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$and$<techmap.v>:260$271_Y [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$516' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:212$386_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$522' (?0) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$180 [0] = \Q [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$420' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$and$<techmap.v>:260$271_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$419' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$and$<techmap.v>:260$271_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$518' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$391_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$524' (00) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$or$<techmap.v>:221$392_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$525' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$180 [3] = $techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$394_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$416' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:263$273_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$394_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$526' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$180 [2] = $techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:229$397_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$412' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:263$273_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272_Y [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$446' (1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$not$<techmap.v>:258$292_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$442' (101) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$ternary$<techmap.v>:258$293_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$429' (?0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:262$295_Y [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$447' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$not$<techmap.v>:258$292_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$443' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$ternary$<techmap.v>:258$293_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$438' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$and$<techmap.v>:260$294_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$527' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:212$386_Y = \Q [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$533' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$183 [0] = \Q [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$448' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$not$<techmap.v>:258$292_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$444' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$ternary$<techmap.v>:258$293_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$439' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$and$<techmap.v>:260$294_Y [1] = \Q [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$449' (0) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$not$<techmap.v>:258$292_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$445' (011) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$ternary$<techmap.v>:258$293_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$440' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$and$<techmap.v>:260$294_Y [2] = \Q [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$326' (?0) in module `\contador' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$324 [0] = \mode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$337' (?0) in module `\contador' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$334 [1] = \mode [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$376' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$and$<techmap.v>:260$245_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$513' (const_and) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$391_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$507' (00) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$or$<techmap.v>:221$392_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$506' (0?) in module `\contador' with constant driver `$auto$alumacc.cc:484:replace_alu$177 [3] = $techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$394_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$372' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:263$247_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:221$394_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$441' (?1) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$and$<techmap.v>:260$294_Y [3] = \Q [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$437' (0?) in module `\contador' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:263$296_Y [4] = $auto$alumacc.cc:484:replace_alu$183 [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$456' (const_and) in module `\contador' with constant driver `$techmap$procmux$155.$and$<techmap.v>:434$320_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$452' (0?) in module `\contador' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$451 = $techmap$procmux$155.$and$<techmap.v>:434$321_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$462' (const_and) in module `\contador' with constant driver `$techmap$procmux$160.$and$<techmap.v>:434$347_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$464' (?0) in module `\contador' with constant driver `$techmap$procmux$160.$reduce_or$<techmap.v>:441$348_Y = $techmap$procmux$160.$and$<techmap.v>:434$346_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$408' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$433'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:263$296_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$408' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$511' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$520'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$175.lcu.$and$<techmap.v>:222$393_Y = $techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:222$393_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$511' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$364' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$433'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$175.$xor$<techmap.v>:262$246_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:263$296_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$364' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$425' is identical to cell `$auto$simplemap.cc:37:simplemap_not$404'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$178.$not$<techmap.v>:258$269_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$175.$not$<techmap.v>:258$243_Y [0]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$425' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$310' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$336'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$308 [0] = $auto$simplemap.cc:250:simplemap_eqne$334 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$310' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$311' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$327'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$308 [1] = $auto$simplemap.cc:250:simplemap_eqne$324 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$311' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$430' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$409'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:262$295_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:262$272_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$430' from module `\contador'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$279' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$284'.
    Redirecting output \Y: $5\Q[3:0] [0] = $4\Q[3:0] [0]
    Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$279' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$528' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$517'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$181.lcu.$and$<techmap.v>:221$388_Y = $techmap$auto$alumacc.cc:470:replace_alu$178.lcu.$and$<techmap.v>:221$388_Y
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$528' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$406' is identical to cell `$auto$simplemap.cc:37:simplemap_not$427'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$175.$not$<techmap.v>:258$243_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$178.$not$<techmap.v>:258$269_Y [2]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$406' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$407' is identical to cell `$auto$simplemap.cc:37:simplemap_not$428'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$175.$not$<techmap.v>:258$243_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$178.$not$<techmap.v>:258$269_Y [3]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$407' from module `\contador'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$502' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$459'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$501 = $auto$simplemap.cc:127:simplemap_reduce$458
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$502' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$523' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$534'.
    Redirecting output \Y: $auto$alumacc.cc:484:replace_alu$180 [1] = $auto$alumacc.cc:484:replace_alu$183 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$523' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$230' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$256'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$228 [0] = $auto$simplemap.cc:250:simplemap_eqne$254 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$230' from module `\contador'.
  Cell `$auto$simplemap.cc:37:simplemap_not$426' is identical to cell `$auto$simplemap.cc:37:simplemap_not$405'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$178.$not$<techmap.v>:258$269_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$175.$not$<techmap.v>:258$243_Y [1]
    Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$426' from module `\contador'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$504' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$461'.
    Redirecting output \Y: $techmap$procmux$165.$reduce_or$<techmap.v>:445$349_Y = $techmap$procmux$155.$reduce_or$<techmap.v>:445$318_Y
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$504' from module `\contador'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$434' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$413'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$181.$xor$<techmap.v>:263$296_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$178.$xor$<techmap.v>:263$273_Y [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$434' from module `\contador'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$280' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$285'.
    Redirecting output \Y: $5\Q[3:0] [1] = $4\Q[3:0] [1]
    Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$280' from module `\contador'.
Removed a total of 18 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$405'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$404'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$427'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$428'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$512'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$519'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$520'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$529'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$530'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$531'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$535'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$536'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\contador' to `<abc-temp-dir>/input.blif'..
Extracted 105 gates and 121 wires to a netlist network with 14 inputs and 6 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       14
ABC RESULTS:              AOI3 cells:        7
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        7
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:              OAI4 cells:        7
ABC RESULTS:                OR cells:        7
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        6
ABC RESULTS:        internal signals:      101
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$538$auto$blifparse.cc:286:parse_blif$590' in module `contador'.
Optimizing away select inverter for $_MUX_ cell `$abc$538$auto$blifparse.cc:286:parse_blif$581' in module `contador'.
Optimizing away select inverter for $_MUX_ cell `$abc$538$auto$blifparse.cc:286:parse_blif$588' in module `contador'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
  Cell `$abc$538$auto$blifparse.cc:286:parse_blif$568' is identical to cell `$abc$538$auto$blifparse.cc:286:parse_blif$557'.
    Redirecting output \Y: $abc$538$n50 = $abc$538$n39
    Removing $_XOR_ cell `$abc$538$auto$blifparse.cc:286:parse_blif$568' from module `\contador'.
Removed a total of 1 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \contador

3.22.2. Analyzing design hierarchy..
Top module:  \contador
Removed 0 unused modules.

3.23. Printing statistics.

=== contador ===

   Number of wires:                 78
   Number of wire bits:             88
   Number of public wires:           8
   Number of public wire bits:      15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $_AND_                         14
     $_AOI3_                         7
     $_AOI4_                         2
     $_DFF_P_                        6
     $_MUX_                          3
     $_NAND_                         6
     $_NOR_                          7
     $_NOT_                         12
     $_OAI3_                         1
     $_OAI4_                         7
     $_OR_                           7
     $_XNOR_                         2
     $_XOR_                          5

3.24. Executing CHECK pass (checking for obvious problems).
checking module contador..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\contador':
  mapped 6 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\contador' to `<abc-temp-dir>/input.blif'..
Extracted 73 gates and 87 wires to a netlist network with 14 inputs and 6 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:           AOI21X1 cells:        3
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND2X1 cells:       12
ABC RESULTS:           NAND3X1 cells:       16
ABC RESULTS:            NOR2X1 cells:        6
ABC RESULTS:           OAI21X1 cells:        9
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        2
ABC RESULTS:            XOR2X1 cells:        1
ABC RESULTS:        internal signals:       67
ABC RESULTS:           input signals:       14
ABC RESULTS:          output signals:        6
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 87 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port contador.D: Missing option -inpad.
Mapping port contador.Q using BUFX2.
Don't map input port contador.clk: Missing option -inpad.
Don't map input port contador.enable: Missing option -inpad.
Mapping port contador.load using BUFX2.
Don't map input port contador.mode: Missing option -inpad.
Mapping port contador.rco using BUFX2.
Don't map input port contador.reset: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \contador..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \contador.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\contador'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \contador..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 0a3f471f2a
CPU: user 0.54s system 0.02s, MEM: 37.76 MB total, 10.56 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 14% 1x share (0 sec), 13% 17x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 9 (load 619.197) from node _63_<1>,
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 1.12631 (latency = 337.893 ps)
Top input node fanout is 6 (load 299.574) from node enable.
Warning 1: load of 602.141 is 1.09528 times greater than strongest gate DFFPOSX1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 629.197 is 1.1445 times greater than strongest gate DFFPOSX1
2 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 71    	Out: 71    	+0
	"2" gates	In: 7    	Out: 7    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on mié 2 dic 23:25:55 CST 2020
Running blif2cel.tcl
Loaded LEF file (/usr/share/qflow/tech/osu050/osu050_stdcells.lef) for reading...
Loaded BLIF file (/home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.blif) for reading ...
Loaded CEL file (/home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/layout/contador.cel) for writing...
1st pass of blif file /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.blif. . .
Reading macros from LEF file. . .
Parsing macro AND2X2:  Ports are:
parse_pin
macroname: AND2X2, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: AND2X2, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: AND2X2, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AND2X2, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AND2X2, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI21X1:  Ports are:
parse_pin
macroname: AOI21X1, pinname: A
Port type: INPUT 
A -360 -150 1
parse_pin
macroname: AOI21X1, pinname: B
Port type: INPUT 
B -120 -450 1
parse_pin
macroname: AOI21X1, pinname: C
Port type: INPUT 
C 360 -750 1
parse_pin
macroname: AOI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: AOI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -150 1
parse_pin
macroname: AOI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro AOI22X1:  Ports are:
parse_pin
macroname: AOI22X1, pinname: A
Port type: INPUT 
A -480 -150 1
parse_pin
macroname: AOI22X1, pinname: B
Port type: INPUT 
B -240 -450 1
parse_pin
macroname: AOI22X1, pinname: C
Port type: INPUT 
C 479 -150 1
parse_pin
macroname: AOI22X1, pinname: D
Port type: INPUT 
D 240 -450 1
parse_pin
macroname: AOI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: AOI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: AOI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro BUFX2:  Ports are:
parse_pin
macroname: BUFX2, pinname: A
Port type: INPUT 
A -240 -150 1
parse_pin
macroname: BUFX2, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: BUFX2, pinname: Y
Port type: OUTPUT 
Y 240 -450 1
parse_pin
macroname: BUFX2, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro DFFPOSX1:  Ports are:
parse_pin
macroname: DFFPOSX1, pinname: Q
Port type: OUTPUT 
Q 1320 -150 1
parse_pin
macroname: DFFPOSX1, pinname: CLK
Port type: INPUT 
CLK -1080 -450 1
parse_pin
macroname: DFFPOSX1, pinname: D
Port type: INPUT 
D -361 -150 1
parse_pin
macroname: DFFPOSX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: DFFPOSX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro INVX1:  Ports are:
parse_pin
macroname: INVX1, pinname: A
Port type: INPUT 
A -120 -750 1
parse_pin
macroname: INVX1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: INVX1, pinname: Y
Port type: OUTPUT 
Y 120 -450 1
parse_pin
macroname: INVX1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND2X1:  Ports are:
parse_pin
macroname: NAND2X1, pinname: A
Port type: INPUT 
A -240 -450 1
parse_pin
macroname: NAND2X1, pinname: B
Port type: INPUT 
B 240 150 1
parse_pin
macroname: NAND2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NAND2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: NAND2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro NAND3X1:  Ports are:
parse_pin
macroname: NAND3X1, pinname: A
Port type: INPUT 
A -360 150 1
parse_pin
macroname: NAND3X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: NAND3X1, pinname: C
Port type: INPUT 
C 120 449 1
parse_pin
macroname: NAND3X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: NAND3X1, pinname: Y
Port type: OUTPUT 
Y 360 150 1
parse_pin
macroname: NAND3X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro NOR2X1:  Ports are:
parse_pin
macroname: NOR2X1, pinname: A
Port type: INPUT 
A -240 -750 1
parse_pin
macroname: NOR2X1, pinname: B
Port type: INPUT 
B 240 -150 1
parse_pin
macroname: NOR2X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: NOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: NOR2X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro OAI21X1:  Ports are:
parse_pin
macroname: OAI21X1, pinname: A
Port type: INPUT 
A -360 -450 1
parse_pin
macroname: OAI21X1, pinname: B
Port type: INPUT 
B -120 -150 1
parse_pin
macroname: OAI21X1, pinname: C
Port type: INPUT 
C 360 150 1
parse_pin
macroname: OAI21X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: OAI21X1, pinname: Y
Port type: OUTPUT 
Y 360 -450 1
parse_pin
macroname: OAI21X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro OAI22X1:  Ports are:
parse_pin
macroname: OAI22X1, pinname: A
Port type: INPUT 
A -480 -450 1
parse_pin
macroname: OAI22X1, pinname: B
Port type: INPUT 
B -240 -150 1
parse_pin
macroname: OAI22X1, pinname: C
Port type: INPUT 
C 479 -450 1
parse_pin
macroname: OAI22X1, pinname: D
Port type: INPUT 
D 240 -150 1
parse_pin
macroname: OAI22X1, pinname: gnd
Port type: INOUT 
gnd 0 -1500 1
parse_pin
macroname: OAI22X1, pinname: Y
Port type: OUTPUT 
Y 0 -450 1
parse_pin
macroname: OAI22X1, pinname: vdd
Port type: INOUT 
vdd 0 1500 1
Parsing macro XOR2X1:  Ports are:
parse_pin
macroname: XOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XOR2X1, pinname: Y
Port type: OUTPUT 
Y 0 -150 1
parse_pin
macroname: XOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
Parsing macro XNOR2X1:  Ports are:
parse_pin
macroname: XNOR2X1, pinname: A
Port type: INPUT 
A -720 -450 1
parse_pin
macroname: XNOR2X1, pinname: B
Port type: INPUT 
B 720 -450 1
parse_pin
macroname: XNOR2X1, pinname: gnd
Port type: INOUT 
gnd -1 -1500 1
parse_pin
macroname: XNOR2X1, pinname: Y
Port type: OUTPUT 
Y 239 -150 1
parse_pin
macroname: XNOR2X1, pinname: vdd
Port type: INOUT 
vdd -1 1500 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No contador.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

Read   50 objects so far...
No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :78
Total cell width   :7.73e+04
Total cell height  :2.34e+05
Total cell area    :2.32e+08
Total core area    :2.32e+08
Average cell height:3.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Read   50 objects so far...
Splitting contador.cel into contador.scel and contador.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]

ERROR[check_pin]:the pin <enable> assigned to cell <twpin_enable> is
outside the cell's bounding box:
	cell l:-100 r:100 b:-2147483568 t:2147483568  pin x:0 y:-2147483648


TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University

TimberWolfSC terminated abnormally with 1 error[s] and 0 warning[s]


twflow terminated abnormally with 1 error[s] and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -645.0 ybot = -495.0 xtop = 12885.0 ytop = 8295.0
Core values: 120.0 150.0 13080.0 8150.0
Offsets: 120.0 150.0
3 routing layers
30 horizontal tracks from -300.0 to 8700.0 step 300 (M1, M3, ...)
58 vertical tracks from -480.0 to 13440.0 step 240.0 (M2, M4, ...)
Done with place2def.tcl
Running addspacers.tcl  contador /usr/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file contador.def. . .
Number of rows is 4
Longest row has width 138.8 um
Analysis of DEF file:
Number of components = 77
New number of components = 83
Number of rows = 4
Done with addspacers.tcl
Running blifanno.tcl
Reading DEF file contador.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis
Files:
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.rtl.v
   Verilog: /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.rtlnopwr.v
   Spice:   /home/mariajesus1399/Escritorio/Proyecto_microelectronica/Qflow/contador_4_bits/osu050/synthesis/contador.spc

Running blif2Verilog.
Running blif2BSpice.
Placement script ended on mié 2 dic 23:30:40 CST 2020
